
STM103_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  20000000  0800455c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  20000098  080045f4  00020098  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000208  080045f4  00020208  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  9 .debug_info   000098fe  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000186a  00000000  00000000  000299bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a20  00000000  00000000  0002b230  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000958  00000000  00000000  0002bc50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004253  00000000  00000000  0002c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ea8  00000000  00000000  000307fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000336a3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002c38  00000000  00000000  00033720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f7c 	.word	0x08003f7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08003f7c 	.word	0x08003f7c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <NRF24_DelayMicroSeconds+0x38>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0a      	ldr	r2, [pc, #40]	; (8000198 <NRF24_DelayMicroSeconds+0x3c>)
 800016e:	fba2 2303 	umull	r2, r3, r2, r3
 8000172:	0c9a      	lsrs	r2, r3, #18
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	fb02 f303 	mul.w	r3, r2, r3
 800017a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800017c:	bf00      	nop
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	1e5a      	subs	r2, r3, #1
 8000182:	60fa      	str	r2, [r7, #12]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d1fa      	bne.n	800017e <NRF24_DelayMicroSeconds+0x22>
}
 8000188:	bf00      	nop
 800018a:	3714      	adds	r7, #20
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000028 	.word	0x20000028
 8000198:	165e9f81 	.word	0x165e9f81

0800019c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d008      	beq.n	80001bc <NRF24_csn+0x20>
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <NRF24_csn+0x38>)
 80001ac:	6818      	ldr	r0, [r3, #0]
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <NRF24_csn+0x3c>)
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	2201      	movs	r2, #1
 80001b4:	4619      	mov	r1, r3
 80001b6:	f001 ff0f 	bl	8001fd8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80001ba:	e007      	b.n	80001cc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <NRF24_csn+0x38>)
 80001be:	6818      	ldr	r0, [r3, #0]
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <NRF24_csn+0x3c>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	2200      	movs	r2, #0
 80001c6:	4619      	mov	r1, r3
 80001c8:	f001 ff06 	bl	8001fd8 <HAL_GPIO_WritePin>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	200000bc 	.word	0x200000bc
 80001d8:	200000c0 	.word	0x200000c0

080001dc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d008      	beq.n	80001fc <NRF24_ce+0x20>
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <NRF24_ce+0x38>)
 80001ec:	6818      	ldr	r0, [r3, #0]
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <NRF24_ce+0x3c>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	2201      	movs	r2, #1
 80001f4:	4619      	mov	r1, r3
 80001f6:	f001 feef 	bl	8001fd8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80001fa:	e007      	b.n	800020c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <NRF24_ce+0x38>)
 80001fe:	6818      	ldr	r0, [r3, #0]
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <NRF24_ce+0x3c>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	2200      	movs	r2, #0
 8000206:	4619      	mov	r1, r3
 8000208:	f001 fee6 	bl	8001fd8 <HAL_GPIO_WritePin>
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200000bc 	.word	0x200000bc
 8000218:	200000c2 	.word	0x200000c2

0800021c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000226:	2000      	movs	r0, #0
 8000228:	f7ff ffb8 	bl	800019c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	f003 031f 	and.w	r3, r3, #31
 8000232:	b2db      	uxtb	r3, r3
 8000234:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000236:	f107 010c 	add.w	r1, r7, #12
 800023a:	2364      	movs	r3, #100	; 0x64
 800023c:	2201      	movs	r2, #1
 800023e:	480a      	ldr	r0, [pc, #40]	; (8000268 <NRF24_read_register+0x4c>)
 8000240:	f002 fb81 	bl	8002946 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	2364      	movs	r3, #100	; 0x64
 800024c:	2201      	movs	r2, #1
 800024e:	4806      	ldr	r0, [pc, #24]	; (8000268 <NRF24_read_register+0x4c>)
 8000250:	f002 fcb3 	bl	8002bba <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000254:	7b7b      	ldrb	r3, [r7, #13]
 8000256:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f7ff ff9f 	bl	800019c <NRF24_csn>
	return retData;
 800025e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200000c4 	.word	0x200000c4

0800026c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	6039      	str	r1, [r7, #0]
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ff8d 	bl	800019c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 031f 	and.w	r3, r3, #31
 8000288:	b2db      	uxtb	r3, r3
 800028a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800028c:	f107 010c 	add.w	r1, r7, #12
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2201      	movs	r2, #1
 8000294:	4808      	ldr	r0, [pc, #32]	; (80002b8 <NRF24_read_registerN+0x4c>)
 8000296:	f002 fb56 	bl	8002946 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	b29a      	uxth	r2, r3
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	6839      	ldr	r1, [r7, #0]
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <NRF24_read_registerN+0x4c>)
 80002a4:	f002 fc89 	bl	8002bba <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f7ff ff77 	bl	800019c <NRF24_csn>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000c4 	.word	0x200000c4

080002bc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	460a      	mov	r2, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002cc:	2000      	movs	r0, #0
 80002ce:	f7ff ff65 	bl	800019c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f043 0320 	orr.w	r3, r3, #32
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002e0:	f107 010c 	add.w	r1, r7, #12
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	2202      	movs	r2, #2
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <NRF24_write_register+0x40>)
 80002ea:	f002 fb2c 	bl	8002946 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f7ff ff54 	bl	800019c <NRF24_csn>
}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000c4 	.word	0x200000c4

08000300 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	6039      	str	r1, [r7, #0]
 800030a:	71fb      	strb	r3, [r7, #7]
 800030c:	4613      	mov	r3, r2
 800030e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000310:	2000      	movs	r0, #0
 8000312:	f7ff ff43 	bl	800019c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	b2db      	uxtb	r3, r3
 800031e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000320:	f107 010c 	add.w	r1, r7, #12
 8000324:	2364      	movs	r3, #100	; 0x64
 8000326:	2201      	movs	r2, #1
 8000328:	4808      	ldr	r0, [pc, #32]	; (800034c <NRF24_write_registerN+0x4c>)
 800032a:	f002 fb0c 	bl	8002946 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	b29a      	uxth	r2, r3
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <NRF24_write_registerN+0x4c>)
 8000338:	f002 fb05 	bl	8002946 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f7ff ff2d 	bl	800019c <NRF24_csn>
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200000c4 	.word	0x200000c4

08000350 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800035c:	2000      	movs	r0, #0
 800035e:	f7ff ff1d 	bl	800019c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000362:	23a0      	movs	r3, #160	; 0xa0
 8000364:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000366:	f107 010f 	add.w	r1, r7, #15
 800036a:	2364      	movs	r3, #100	; 0x64
 800036c:	2201      	movs	r2, #1
 800036e:	4808      	ldr	r0, [pc, #32]	; (8000390 <NRF24_write_payload+0x40>)
 8000370:	f002 fae9 	bl	8002946 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	b29a      	uxth	r2, r3
 8000378:	2364      	movs	r3, #100	; 0x64
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	4804      	ldr	r0, [pc, #16]	; (8000390 <NRF24_write_payload+0x40>)
 800037e:	f002 fae2 	bl	8002946 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff ff0a 	bl	800019c <NRF24_csn>
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	200000c4 	.word	0x200000c4

08000394 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000398:	21ff      	movs	r1, #255	; 0xff
 800039a:	20e1      	movs	r0, #225	; 0xe1
 800039c:	f7ff ff8e 	bl	80002bc <NRF24_write_register>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80003a8:	21ff      	movs	r1, #255	; 0xff
 80003aa:	20e2      	movs	r0, #226	; 0xe2
 80003ac:	f7ff ff86 	bl	80002bc <NRF24_write_register>
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80003ba:	2007      	movs	r0, #7
 80003bc:	f7ff ff2e 	bl	800021c <NRF24_read_register>
 80003c0:	4603      	mov	r3, r0
 80003c2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80003c4:	79fb      	ldrb	r3, [r7, #7]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80003d0:	b082      	sub	sp, #8
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b084      	sub	sp, #16
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	61fb      	str	r3, [r7, #28]
 80003dc:	460b      	mov	r3, r1
 80003de:	807b      	strh	r3, [r7, #2]
 80003e0:	4613      	mov	r3, r2
 80003e2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80003e4:	4b66      	ldr	r3, [pc, #408]	; (8000580 <NRF24_begin+0x1b0>)
 80003e6:	4618      	mov	r0, r3
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	2258      	movs	r2, #88	; 0x58
 80003ee:	4619      	mov	r1, r3
 80003f0:	f003 f990 	bl	8003714 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80003f4:	4a63      	ldr	r2, [pc, #396]	; (8000584 <NRF24_begin+0x1b4>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80003fa:	4a63      	ldr	r2, [pc, #396]	; (8000588 <NRF24_begin+0x1b8>)
 80003fc:	887b      	ldrh	r3, [r7, #2]
 80003fe:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000400:	4a62      	ldr	r2, [pc, #392]	; (800058c <NRF24_begin+0x1bc>)
 8000402:	883b      	ldrh	r3, [r7, #0]
 8000404:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f7ff fec8 	bl	800019c <NRF24_csn>
	NRF24_ce(0);
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff fee5 	bl	80001dc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000412:	2005      	movs	r0, #5
 8000414:	f001 fb82 	bl	8001b1c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000418:	2108      	movs	r1, #8
 800041a:	2000      	movs	r0, #0
 800041c:	f7ff ff4e 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000420:	213f      	movs	r1, #63	; 0x3f
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ff4a 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000428:	2103      	movs	r1, #3
 800042a:	2002      	movs	r0, #2
 800042c:	f7ff ff46 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000430:	2103      	movs	r1, #3
 8000432:	2003      	movs	r0, #3
 8000434:	f7ff ff42 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000438:	2103      	movs	r1, #3
 800043a:	2004      	movs	r0, #4
 800043c:	f7ff ff3e 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000440:	2102      	movs	r1, #2
 8000442:	2005      	movs	r0, #5
 8000444:	f7ff ff3a 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000448:	210f      	movs	r1, #15
 800044a:	2006      	movs	r0, #6
 800044c:	f7ff ff36 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000450:	210e      	movs	r1, #14
 8000452:	2007      	movs	r0, #7
 8000454:	f7ff ff32 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000458:	2100      	movs	r1, #0
 800045a:	2008      	movs	r0, #8
 800045c:	f7ff ff2e 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000460:	2100      	movs	r1, #0
 8000462:	2009      	movs	r0, #9
 8000464:	f7ff ff2a 	bl	80002bc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000468:	23e7      	movs	r3, #231	; 0xe7
 800046a:	733b      	strb	r3, [r7, #12]
 800046c:	23e7      	movs	r3, #231	; 0xe7
 800046e:	72fb      	strb	r3, [r7, #11]
 8000470:	23e7      	movs	r3, #231	; 0xe7
 8000472:	72bb      	strb	r3, [r7, #10]
 8000474:	23e7      	movs	r3, #231	; 0xe7
 8000476:	727b      	strb	r3, [r7, #9]
 8000478:	23e7      	movs	r3, #231	; 0xe7
 800047a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	2205      	movs	r2, #5
 8000482:	4619      	mov	r1, r3
 8000484:	200a      	movs	r0, #10
 8000486:	f7ff ff3b 	bl	8000300 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800048a:	23c2      	movs	r3, #194	; 0xc2
 800048c:	733b      	strb	r3, [r7, #12]
 800048e:	23c2      	movs	r3, #194	; 0xc2
 8000490:	72fb      	strb	r3, [r7, #11]
 8000492:	23c2      	movs	r3, #194	; 0xc2
 8000494:	72bb      	strb	r3, [r7, #10]
 8000496:	23c2      	movs	r3, #194	; 0xc2
 8000498:	727b      	strb	r3, [r7, #9]
 800049a:	23c2      	movs	r3, #194	; 0xc2
 800049c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	2205      	movs	r2, #5
 80004a4:	4619      	mov	r1, r3
 80004a6:	200b      	movs	r0, #11
 80004a8:	f7ff ff2a 	bl	8000300 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80004ac:	21c3      	movs	r1, #195	; 0xc3
 80004ae:	200c      	movs	r0, #12
 80004b0:	f7ff ff04 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80004b4:	21c4      	movs	r1, #196	; 0xc4
 80004b6:	200d      	movs	r0, #13
 80004b8:	f7ff ff00 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80004bc:	21c5      	movs	r1, #197	; 0xc5
 80004be:	200e      	movs	r0, #14
 80004c0:	f7ff fefc 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80004c4:	21c6      	movs	r1, #198	; 0xc6
 80004c6:	200f      	movs	r0, #15
 80004c8:	f7ff fef8 	bl	80002bc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80004cc:	23e7      	movs	r3, #231	; 0xe7
 80004ce:	733b      	strb	r3, [r7, #12]
 80004d0:	23e7      	movs	r3, #231	; 0xe7
 80004d2:	72fb      	strb	r3, [r7, #11]
 80004d4:	23e7      	movs	r3, #231	; 0xe7
 80004d6:	72bb      	strb	r3, [r7, #10]
 80004d8:	23e7      	movs	r3, #231	; 0xe7
 80004da:	727b      	strb	r3, [r7, #9]
 80004dc:	23e7      	movs	r3, #231	; 0xe7
 80004de:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	2205      	movs	r2, #5
 80004e6:	4619      	mov	r1, r3
 80004e8:	2010      	movs	r0, #16
 80004ea:	f7ff ff09 	bl	8000300 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2011      	movs	r0, #17
 80004f2:	f7ff fee3 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80004f6:	2100      	movs	r1, #0
 80004f8:	2012      	movs	r0, #18
 80004fa:	f7ff fedf 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80004fe:	2100      	movs	r1, #0
 8000500:	2013      	movs	r0, #19
 8000502:	f7ff fedb 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000506:	2100      	movs	r1, #0
 8000508:	2014      	movs	r0, #20
 800050a:	f7ff fed7 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800050e:	2100      	movs	r1, #0
 8000510:	2015      	movs	r0, #21
 8000512:	f7ff fed3 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000516:	2100      	movs	r1, #0
 8000518:	2016      	movs	r0, #22
 800051a:	f7ff fecf 	bl	80002bc <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800051e:	f000 fa8b 	bl	8000a38 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000522:	2100      	movs	r1, #0
 8000524:	201c      	movs	r0, #28
 8000526:	f7ff fec9 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800052a:	2100      	movs	r1, #0
 800052c:	201d      	movs	r0, #29
 800052e:	f7ff fec5 	bl	80002bc <NRF24_write_register>
	printRadioSettings();
 8000532:	f000 fa9b 	bl	8000a6c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000536:	210f      	movs	r1, #15
 8000538:	200f      	movs	r0, #15
 800053a:	f000 f8b1 	bl	80006a0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800053e:	2003      	movs	r0, #3
 8000540:	f000 f929 	bl	8000796 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000544:	2001      	movs	r0, #1
 8000546:	f000 f95f 	bl	8000808 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800054a:	2002      	movs	r0, #2
 800054c:	f000 f9a2 	bl	8000894 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000550:	f000 f8f4 	bl	800073c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000554:	2020      	movs	r0, #32
 8000556:	f000 f8d3 	bl	8000700 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 800055a:	f000 fa64 	bl	8000a26 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800055e:	204c      	movs	r0, #76	; 0x4c
 8000560:	f000 f8b9 	bl	80006d6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000564:	f7ff ff16 	bl	8000394 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000568:	f7ff ff1c 	bl	80003a4 <NRF24_flush_rx>

	NRF24_powerDown();
 800056c:	f000 f9ba 	bl	80008e4 <NRF24_powerDown>

}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800057a:	b002      	add	sp, #8
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	200000c4 	.word	0x200000c4
 8000584:	200000bc 	.word	0x200000bc
 8000588:	200000c0 	.word	0x200000c0
 800058c:	200000c2 	.word	0x200000c2

08000590 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fe21 	bl	80001dc <NRF24_ce>
	NRF24_flush_tx();
 800059a:	f7ff fefb 	bl	8000394 <NRF24_flush_tx>
	NRF24_flush_rx();
 800059e:	f7ff ff01 	bl	80003a4 <NRF24_flush_rx>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80005b4:	f000 fa37 	bl	8000a26 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4619      	mov	r1, r3
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f9d0 	bl	8000962 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80005c2:	f001 faa1 	bl	8001b08 <HAL_GetTick>
 80005c6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80005c8:	230a      	movs	r3, #10
 80005ca:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80005cc:	f107 030d 	add.w	r3, r7, #13
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	2008      	movs	r0, #8
 80005d6:	f7ff fe49 	bl	800026c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80005da:	f7ff feeb 	bl	80003b4 <NRF24_get_status>
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d107      	bne.n	80005fc <NRF24_write+0x54>
 80005ec:	f001 fa8c 	bl	8001b08 <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3e7      	bcc.n	80005cc <NRF24_write+0x24>

	printConfigReg();
 80005fc:	f000 ff4a 	bl	8001494 <printConfigReg>
	printStatusReg();
 8000600:	f000 fec6 	bl	8001390 <printStatusReg>

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000604:	f107 010b 	add.w	r1, r7, #11
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <NRF24_write+0x98>)
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f9d6 	bl	80009c0 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000614:	7b3b      	ldrb	r3, [r7, #12]
 8000616:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <NRF24_write+0x98>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <NRF24_write+0x84>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000620:	f000 f884 	bl	800072c <NRF24_getDynamicPayloadSize>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <NRF24_write+0x9c>)
 800062a:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 800062c:	f000 f80c 	bl	8000648 <NRF24_available>
	NRF24_flush_tx();
 8000630:	f7ff feb0 	bl	8000394 <NRF24_flush_tx>
	return retStatus;
 8000634:	7bbb      	ldrb	r3, [r7, #14]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200000b4 	.word	0x200000b4
 8000644:	200000b5 	.word	0x200000b5

08000648 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f958 	bl	8000902 <NRF24_availablePipe>
 8000652:	4603      	mov	r3, r0
}
 8000654:	4618      	mov	r0, r3
 8000656:	bd80      	pop	{r7, pc}

08000658 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000662:	463b      	mov	r3, r7
 8000664:	2205      	movs	r2, #5
 8000666:	4619      	mov	r1, r3
 8000668:	200a      	movs	r0, #10
 800066a:	f7ff fe49 	bl	8000300 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800066e:	463b      	mov	r3, r7
 8000670:	2205      	movs	r2, #5
 8000672:	4619      	mov	r1, r3
 8000674:	2010      	movs	r0, #16
 8000676:	f7ff fe43 	bl	8000300 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 800067a:	2320      	movs	r3, #32
 800067c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <NRF24_openWritingPipe+0x44>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	7bfa      	ldrb	r2, [r7, #15]
 8000684:	4293      	cmp	r3, r2
 8000686:	bf28      	it	cs
 8000688:	4613      	movcs	r3, r2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	2011      	movs	r0, #17
 8000690:	f7ff fe14 	bl	80002bc <NRF24_write_register>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000b6 	.word	0x200000b6

080006a0 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	460a      	mov	r2, r1
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	4613      	mov	r3, r2
 80006ae:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	011b      	lsls	r3, r3, #4
 80006b4:	b25a      	sxtb	r2, r3
 80006b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	2004      	movs	r0, #4
 80006ca:	f7ff fdf7 	bl	80002bc <NRF24_write_register>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b084      	sub	sp, #16
 80006da:	af00      	add	r7, sp, #0
 80006dc:	4603      	mov	r3, r0
 80006de:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80006e0:	237f      	movs	r3, #127	; 0x7f
 80006e2:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80006e4:	7bfa      	ldrb	r2, [r7, #15]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4293      	cmp	r3, r2
 80006ea:	bf28      	it	cs
 80006ec:	4613      	movcs	r3, r2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	2005      	movs	r0, #5
 80006f4:	f7ff fde2 	bl	80002bc <NRF24_write_register>
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800070a:	2320      	movs	r3, #32
 800070c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4293      	cmp	r3, r2
 8000714:	bf28      	it	cs
 8000716:	4613      	movcs	r3, r2
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b03      	ldr	r3, [pc, #12]	; (8000728 <NRF24_setPayloadSize+0x28>)
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	200000b6 	.word	0x200000b6

0800072c <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000730:	2060      	movs	r0, #96	; 0x60
 8000732:	f7ff fd73 	bl	800021c <NRF24_read_register>
 8000736:	4603      	mov	r3, r0
}
 8000738:	4618      	mov	r0, r3
 800073a:	bd80      	pop	{r7, pc}

0800073c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000740:	201d      	movs	r0, #29
 8000742:	f7ff fd6b 	bl	800021c <NRF24_read_register>
 8000746:	4603      	mov	r3, r0
 8000748:	f023 0304 	bic.w	r3, r3, #4
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	201d      	movs	r0, #29
 8000752:	f7ff fdb3 	bl	80002bc <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000756:	2100      	movs	r1, #0
 8000758:	201c      	movs	r0, #28
 800075a:	f7ff fdaf 	bl	80002bc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800075e:	4b02      	ldr	r3, [pc, #8]	; (8000768 <NRF24_disableDynamicPayloads+0x2c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000b7 	.word	0x200000b7

0800076c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d004      	beq.n	8000786 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 800077c:	213f      	movs	r1, #63	; 0x3f
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fd9c 	bl	80002bc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000784:	e003      	b.n	800078e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000786:	2100      	movs	r1, #0
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff fd97 	bl	80002bc <NRF24_write_register>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80007a0:	2006      	movs	r0, #6
 80007a2:	f7ff fd3b 	bl	800021c <NRF24_read_register>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	f023 0306 	bic.w	r3, r3, #6
 80007b0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d104      	bne.n	80007c2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	f043 0306 	orr.w	r3, r3, #6
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e019      	b.n	80007f6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d104      	bne.n	80007d2 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	73fb      	strb	r3, [r7, #15]
 80007d0:	e011      	b.n	80007f6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d104      	bne.n	80007e2 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	f043 0302 	orr.w	r3, r3, #2
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e009      	b.n	80007f6 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d006      	beq.n	80007f6 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d103      	bne.n	80007f6 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	f043 0306 	orr.w	r3, r3, #6
 80007f4:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	4619      	mov	r1, r3
 80007fa:	2006      	movs	r0, #6
 80007fc:	f7ff fd5e 	bl	80002bc <NRF24_write_register>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000812:	2300      	movs	r3, #0
 8000814:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000816:	2006      	movs	r0, #6
 8000818:	f7ff fd00 	bl	800021c <NRF24_read_register>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <NRF24_setDataRate+0x88>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800082c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d107      	bne.n	8000844 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <NRF24_setDataRate+0x88>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	73bb      	strb	r3, [r7, #14]
 8000842:	e00d      	b.n	8000860 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d107      	bne.n	800085a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <NRF24_setDataRate+0x88>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	f043 0308 	orr.w	r3, r3, #8
 8000856:	73bb      	strb	r3, [r7, #14]
 8000858:	e002      	b.n	8000860 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <NRF24_setDataRate+0x88>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	4619      	mov	r1, r3
 8000864:	2006      	movs	r0, #6
 8000866:	f7ff fd29 	bl	80002bc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800086a:	2006      	movs	r0, #6
 800086c:	f7ff fcd6 	bl	800021c <NRF24_read_register>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	7bbb      	ldrb	r3, [r7, #14]
 8000876:	4293      	cmp	r3, r2
 8000878:	d102      	bne.n	8000880 <NRF24_setDataRate+0x78>
  {
    result = true;
 800087a:	2301      	movs	r3, #1
 800087c:	73fb      	strb	r3, [r7, #15]
 800087e:	e002      	b.n	8000886 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <NRF24_setDataRate+0x88>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000b8 	.word	0x200000b8

08000894 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fcbc 	bl	800021c <NRF24_read_register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f023 030c 	bic.w	r3, r3, #12
 80008aa:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d00f      	beq.n	80008d2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d104      	bne.n	80008c2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e007      	b.n	80008d2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	4619      	mov	r1, r3
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff fcf0 	bl	80002bc <NRF24_write_register>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fc97 	bl	800021c <NRF24_read_register>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f023 0302 	bic.w	r3, r3, #2
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fcdf 	bl	80002bc <NRF24_write_register>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}

08000902 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b084      	sub	sp, #16
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800090a:	f7ff fd53 	bl	80003b4 <NRF24_get_status>
 800090e:	4603      	mov	r3, r0
 8000910:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf14      	ite	ne
 800091c:	2301      	movne	r3, #1
 800091e:	2300      	moveq	r3, #0
 8000920:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d017      	beq.n	8000958 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d007      	beq.n	800093e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f003 0307 	and.w	r3, r3, #7
 8000938:	b2da      	uxtb	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800093e:	2140      	movs	r1, #64	; 0x40
 8000940:	2007      	movs	r0, #7
 8000942:	f7ff fcbb 	bl	80002bc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	f003 0320 	and.w	r3, r3, #32
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000950:	2120      	movs	r1, #32
 8000952:	2007      	movs	r0, #7
 8000954:	f7ff fcb2 	bl	80002bc <NRF24_write_register>
    }
  }
  return result;
 8000958:	7bbb      	ldrb	r3, [r7, #14]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fc34 	bl	80001dc <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fc51 	bl	800021c <NRF24_read_register>
 800097a:	4603      	mov	r3, r0
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f023 0301 	bic.w	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4619      	mov	r1, r3
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fc96 	bl	80002bc <NRF24_write_register>
  NRF24_ce(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff fc23 	bl	80001dc <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000996:	2096      	movs	r0, #150	; 0x96
 8000998:	f7ff fbe0 	bl	800015c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	4619      	mov	r1, r3
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fcd5 	bl	8000350 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff fc18 	bl	80001dc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80009ac:	200f      	movs	r0, #15
 80009ae:	f7ff fbd5 	bl	800015c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fc12 	bl	80001dc <NRF24_ce>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80009cc:	f7ff fcf2 	bl	80003b4 <NRF24_get_status>
 80009d0:	4603      	mov	r3, r0
 80009d2:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80009da:	2170      	movs	r1, #112	; 0x70
 80009dc:	2007      	movs	r0, #7
 80009de:	f7ff fc6d 	bl	80002bc <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	f003 0320 	and.w	r3, r3, #32
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf14      	ite	ne
 80009ec:	2301      	movne	r3, #1
 80009ee:	2300      	moveq	r3, #0
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80009f6:	7dfb      	ldrb	r3, [r7, #23]
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	bf14      	ite	ne
 8000a14:	2301      	movne	r3, #1
 8000a16:	2300      	moveq	r3, #0
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	701a      	strb	r2, [r3, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000a2a:	2170      	movs	r1, #112	; 0x70
 8000a2c:	2007      	movs	r0, #7
 8000a2e:	f7ff fc45 	bl	80002bc <NRF24_write_register>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fbac 	bl	800019c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000a44:	2350      	movs	r3, #80	; 0x50
 8000a46:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000a48:	2373      	movs	r3, #115	; 0x73
 8000a4a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000a4c:	1d39      	adds	r1, r7, #4
 8000a4e:	2364      	movs	r3, #100	; 0x64
 8000a50:	2202      	movs	r2, #2
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <NRF24_ACTIVATE_cmd+0x30>)
 8000a54:	f001 ff77 	bl	8002946 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff fb9f 	bl	800019c <NRF24_csn>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000c4 	.word	0x200000c4

08000a6c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6e:	b0a1      	sub	sp, #132	; 0x84
 8000a70:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4ab6      	ldr	r2, [pc, #728]	; (8000d50 <printRadioSettings+0x2e4>)
 8000a78:	461c      	mov	r4, r3
 8000a7a:	4615      	mov	r5, r2
 8000a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	8022      	strh	r2, [r4, #0]
 8000a8e:	3402      	adds	r4, #2
 8000a90:	0c1b      	lsrs	r3, r3, #16
 8000a92:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fb57 	bl	800014c <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f107 0108 	add.w	r1, r7, #8
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	48aa      	ldr	r0, [pc, #680]	; (8000d54 <printRadioSettings+0x2e8>)
 8000aaa:	f002 fc7a 	bl	80033a2 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fbb4 	bl	800021c <NRF24_read_register>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000aba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d020      	beq.n	8000b08 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000ac6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00b      	beq.n	8000aea <printRadioSettings+0x7e>
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	4aa0      	ldr	r2, [pc, #640]	; (8000d58 <printRadioSettings+0x2ec>)
 8000ad8:	461c      	mov	r4, r3
 8000ada:	4615      	mov	r5, r2
 8000adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ae8:	e017      	b.n	8000b1a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4a9b      	ldr	r2, [pc, #620]	; (8000d5c <printRadioSettings+0x2f0>)
 8000af0:	461c      	mov	r4, r3
 8000af2:	4615      	mov	r5, r2
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000afc:	c403      	stmia	r4!, {r0, r1}
 8000afe:	8022      	strh	r2, [r4, #0]
 8000b00:	3402      	adds	r4, #2
 8000b02:	0c13      	lsrs	r3, r2, #16
 8000b04:	7023      	strb	r3, [r4, #0]
 8000b06:	e008      	b.n	8000b1a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4a94      	ldr	r2, [pc, #592]	; (8000d60 <printRadioSettings+0x2f4>)
 8000b0e:	461c      	mov	r4, r3
 8000b10:	4615      	mov	r5, r2
 8000b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb14 	bl	800014c <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f107 0108 	add.w	r1, r7, #8
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	4889      	ldr	r0, [pc, #548]	; (8000d54 <printRadioSettings+0x2e8>)
 8000b30:	f002 fc37 	bl	80033a2 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff fb71 	bl	800021c <NRF24_read_register>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b44:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bfcc      	ite	gt
 8000b4c:	2301      	movgt	r3, #1
 8000b4e:	2300      	movle	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b58:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bfcc      	ite	gt
 8000b60:	2301      	movgt	r3, #1
 8000b62:	2300      	movle	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b6c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bfcc      	ite	gt
 8000b74:	2301      	movgt	r3, #1
 8000b76:	2300      	movle	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b80:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bfcc      	ite	gt
 8000b88:	2301      	movgt	r3, #1
 8000b8a:	2300      	movle	r3, #0
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b94:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bfcc      	ite	gt
 8000b9c:	2301      	movgt	r3, #1
 8000b9e:	2300      	movle	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ba4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ba8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	bfcc      	ite	gt
 8000bb0:	2301      	movgt	r3, #1
 8000bb2:	2300      	movle	r3, #0
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	f107 0008 	add.w	r0, r7, #8
 8000bba:	9303      	str	r3, [sp, #12]
 8000bbc:	9402      	str	r4, [sp, #8]
 8000bbe:	9101      	str	r1, [sp, #4]
 8000bc0:	9200      	str	r2, [sp, #0]
 8000bc2:	4633      	mov	r3, r6
 8000bc4:	462a      	mov	r2, r5
 8000bc6:	4967      	ldr	r1, [pc, #412]	; (8000d64 <printRadioSettings+0x2f8>)
 8000bc8:	f002 fdb8 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fabb 	bl	800014c <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	f107 0108 	add.w	r1, r7, #8
 8000bde:	230a      	movs	r3, #10
 8000be0:	485c      	ldr	r0, [pc, #368]	; (8000d54 <printRadioSettings+0x2e8>)
 8000be2:	f002 fbde 	bl	80033a2 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fb18 	bl	800021c <NRF24_read_register>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000bf2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000bf6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bfcc      	ite	gt
 8000bfe:	2301      	movgt	r3, #1
 8000c00:	2300      	movle	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c0a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bfcc      	ite	gt
 8000c12:	2301      	movgt	r3, #1
 8000c14:	2300      	movle	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c1e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bfcc      	ite	gt
 8000c26:	2301      	movgt	r3, #1
 8000c28:	2300      	movle	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c32:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bfcc      	ite	gt
 8000c3a:	2301      	movgt	r3, #1
 8000c3c:	2300      	movle	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c46:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bfcc      	ite	gt
 8000c4e:	2301      	movgt	r3, #1
 8000c50:	2300      	movle	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c5a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bfcc      	ite	gt
 8000c62:	2301      	movgt	r3, #1
 8000c64:	2300      	movle	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	f107 0008 	add.w	r0, r7, #8
 8000c6c:	9303      	str	r3, [sp, #12]
 8000c6e:	9402      	str	r4, [sp, #8]
 8000c70:	9101      	str	r1, [sp, #4]
 8000c72:	9200      	str	r2, [sp, #0]
 8000c74:	4633      	mov	r3, r6
 8000c76:	462a      	mov	r2, r5
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <printRadioSettings+0x2fc>)
 8000c7a:	f002 fd5f 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fa62 	bl	800014c <strlen>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	f107 0108 	add.w	r1, r7, #8
 8000c90:	230a      	movs	r3, #10
 8000c92:	4830      	ldr	r0, [pc, #192]	; (8000d54 <printRadioSettings+0x2e8>)
 8000c94:	f002 fb85 	bl	80033a2 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f7ff fabf 	bl	800021c <NRF24_read_register>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000ca8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cac:	3302      	adds	r3, #2
 8000cae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000cb2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	492c      	ldr	r1, [pc, #176]	; (8000d6c <printRadioSettings+0x300>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fd3d 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fa40 	bl	800014c <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	f107 0108 	add.w	r1, r7, #8
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	481f      	ldr	r0, [pc, #124]	; (8000d54 <printRadioSettings+0x2e8>)
 8000cd8:	f002 fb63 	bl	80033a2 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000cdc:	2005      	movs	r0, #5
 8000cde:	f7ff fa9d 	bl	800021c <NRF24_read_register>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000ce8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	491e      	ldr	r1, [pc, #120]	; (8000d70 <printRadioSettings+0x304>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fd20 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fa23 	bl	800014c <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	f107 0108 	add.w	r1, r7, #8
 8000d0e:	230a      	movs	r3, #10
 8000d10:	4810      	ldr	r0, [pc, #64]	; (8000d54 <printRadioSettings+0x2e8>)
 8000d12:	f002 fb46 	bl	80033a2 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000d16:	2006      	movs	r0, #6
 8000d18:	f7ff fa80 	bl	800021c <NRF24_read_register>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000d22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d024      	beq.n	8000d78 <printRadioSettings+0x30c>
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <printRadioSettings+0x308>)
 8000d34:	461c      	mov	r4, r3
 8000d36:	4615      	mov	r5, r2
 8000d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d40:	6020      	str	r0, [r4, #0]
 8000d42:	3404      	adds	r4, #4
 8000d44:	8021      	strh	r1, [r4, #0]
 8000d46:	3402      	adds	r4, #2
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	7023      	strb	r3, [r4, #0]
 8000d4c:	e023      	b.n	8000d96 <printRadioSettings+0x32a>
 8000d4e:	bf00      	nop
 8000d50:	08003f94 	.word	0x08003f94
 8000d54:	2000011c 	.word	0x2000011c
 8000d58:	08003fc8 	.word	0x08003fc8
 8000d5c:	08003fe4 	.word	0x08003fe4
 8000d60:	08004000 	.word	0x08004000
 8000d64:	08004014 	.word	0x08004014
 8000d68:	08004058 	.word	0x08004058
 8000d6c:	080040a4 	.word	0x080040a4
 8000d70:	080040c0 	.word	0x080040c0
 8000d74:	080040d4 	.word	0x080040d4
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <printRadioSettings+0x3b8>)
 8000d7e:	461c      	mov	r4, r3
 8000d80:	4615      	mov	r5, r2
 8000d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d8a:	6020      	str	r0, [r4, #0]
 8000d8c:	3404      	adds	r4, #4
 8000d8e:	8021      	strh	r1, [r4, #0]
 8000d90:	3402      	adds	r4, #2
 8000d92:	0c0b      	lsrs	r3, r1, #16
 8000d94:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff f9d6 	bl	800014c <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f107 0108 	add.w	r1, r7, #8
 8000da8:	230a      	movs	r3, #10
 8000daa:	481f      	ldr	r0, [pc, #124]	; (8000e28 <printRadioSettings+0x3bc>)
 8000dac:	f002 faf9 	bl	80033a2 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000db0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000db4:	f003 0306 	and.w	r3, r3, #6
 8000db8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000dbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dc0:	085b      	lsrs	r3, r3, #1
 8000dc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000dc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d109      	bne.n	8000de2 <printRadioSettings+0x376>
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <printRadioSettings+0x3c0>)
 8000dd4:	461c      	mov	r4, r3
 8000dd6:	4615      	mov	r5, r2
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	6023      	str	r3, [r4, #0]
 8000de0:	e037      	b.n	8000e52 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000de2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d109      	bne.n	8000dfe <printRadioSettings+0x392>
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <printRadioSettings+0x3c4>)
 8000df0:	461c      	mov	r4, r3
 8000df2:	4615      	mov	r5, r2
 8000df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	6023      	str	r3, [r4, #0]
 8000dfc:	e029      	b.n	8000e52 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000dfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d118      	bne.n	8000e38 <printRadioSettings+0x3cc>
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <printRadioSettings+0x3c8>)
 8000e0c:	461c      	mov	r4, r3
 8000e0e:	4615      	mov	r5, r2
 8000e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	8022      	strh	r2, [r4, #0]
 8000e1a:	3402      	adds	r4, #2
 8000e1c:	0c1b      	lsrs	r3, r3, #16
 8000e1e:	7023      	strb	r3, [r4, #0]
 8000e20:	e017      	b.n	8000e52 <printRadioSettings+0x3e6>
 8000e22:	bf00      	nop
 8000e24:	080040ec 	.word	0x080040ec
 8000e28:	2000011c 	.word	0x2000011c
 8000e2c:	08004104 	.word	0x08004104
 8000e30:	08004118 	.word	0x08004118
 8000e34:	0800412c 	.word	0x0800412c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000e38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d108      	bne.n	8000e52 <printRadioSettings+0x3e6>
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4ad7      	ldr	r2, [pc, #860]	; (80011a4 <printRadioSettings+0x738>)
 8000e46:	461c      	mov	r4, r3
 8000e48:	4615      	mov	r5, r2
 8000e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4e:	682b      	ldr	r3, [r5, #0]
 8000e50:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff f978 	bl	800014c <strlen>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	f107 0108 	add.w	r1, r7, #8
 8000e64:	230a      	movs	r3, #10
 8000e66:	48d0      	ldr	r0, [pc, #832]	; (80011a8 <printRadioSettings+0x73c>)
 8000e68:	f002 fa9b 	bl	80033a2 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2205      	movs	r2, #5
 8000e70:	4619      	mov	r1, r3
 8000e72:	200a      	movs	r0, #10
 8000e74:	f7ff f9fa 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000e78:	793b      	ldrb	r3, [r7, #4]
 8000e7a:	461c      	mov	r4, r3
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	461d      	mov	r5, r3
 8000e80:	78bb      	ldrb	r3, [r7, #2]
 8000e82:	787a      	ldrb	r2, [r7, #1]
 8000e84:	7839      	ldrb	r1, [r7, #0]
 8000e86:	f107 0008 	add.w	r0, r7, #8
 8000e8a:	9102      	str	r1, [sp, #8]
 8000e8c:	9201      	str	r2, [sp, #4]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	462b      	mov	r3, r5
 8000e92:	4622      	mov	r2, r4
 8000e94:	49c5      	ldr	r1, [pc, #788]	; (80011ac <printRadioSettings+0x740>)
 8000e96:	f002 fc51 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f954 	bl	800014c <strlen>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	f107 0108 	add.w	r1, r7, #8
 8000eac:	230a      	movs	r3, #10
 8000eae:	48be      	ldr	r0, [pc, #760]	; (80011a8 <printRadioSettings+0x73c>)
 8000eb0:	f002 fa77 	bl	80033a2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2205      	movs	r2, #5
 8000eb8:	4619      	mov	r1, r3
 8000eba:	200b      	movs	r0, #11
 8000ebc:	f7ff f9d6 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000ec0:	793b      	ldrb	r3, [r7, #4]
 8000ec2:	461c      	mov	r4, r3
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	461d      	mov	r5, r3
 8000ec8:	78bb      	ldrb	r3, [r7, #2]
 8000eca:	787a      	ldrb	r2, [r7, #1]
 8000ecc:	7839      	ldrb	r1, [r7, #0]
 8000ece:	f107 0008 	add.w	r0, r7, #8
 8000ed2:	9102      	str	r1, [sp, #8]
 8000ed4:	9201      	str	r2, [sp, #4]
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	462b      	mov	r3, r5
 8000eda:	4622      	mov	r2, r4
 8000edc:	49b4      	ldr	r1, [pc, #720]	; (80011b0 <printRadioSettings+0x744>)
 8000ede:	f002 fc2d 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff f930 	bl	800014c <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f107 0108 	add.w	r1, r7, #8
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	48ac      	ldr	r0, [pc, #688]	; (80011a8 <printRadioSettings+0x73c>)
 8000ef8:	f002 fa53 	bl	80033a2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8000efc:	463b      	mov	r3, r7
 8000efe:	2201      	movs	r2, #1
 8000f00:	4619      	mov	r1, r3
 8000f02:	200c      	movs	r0, #12
 8000f04:	f7ff f9b2 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000f08:	783b      	ldrb	r3, [r7, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	49a8      	ldr	r1, [pc, #672]	; (80011b4 <printRadioSettings+0x748>)
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fc12 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff f915 	bl	800014c <strlen>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	f107 0108 	add.w	r1, r7, #8
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	489e      	ldr	r0, [pc, #632]	; (80011a8 <printRadioSettings+0x73c>)
 8000f2e:	f002 fa38 	bl	80033a2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8000f32:	463b      	mov	r3, r7
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	200d      	movs	r0, #13
 8000f3a:	f7ff f997 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000f3e:	783b      	ldrb	r3, [r7, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	499c      	ldr	r1, [pc, #624]	; (80011b8 <printRadioSettings+0x74c>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fbf7 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff f8fa 	bl	800014c <strlen>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f107 0108 	add.w	r1, r7, #8
 8000f60:	230a      	movs	r3, #10
 8000f62:	4891      	ldr	r0, [pc, #580]	; (80011a8 <printRadioSettings+0x73c>)
 8000f64:	f002 fa1d 	bl	80033a2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	200e      	movs	r0, #14
 8000f70:	f7ff f97c 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000f74:	783b      	ldrb	r3, [r7, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	498f      	ldr	r1, [pc, #572]	; (80011bc <printRadioSettings+0x750>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fbdc 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff f8df 	bl	800014c <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f107 0108 	add.w	r1, r7, #8
 8000f96:	230a      	movs	r3, #10
 8000f98:	4883      	ldr	r0, [pc, #524]	; (80011a8 <printRadioSettings+0x73c>)
 8000f9a:	f002 fa02 	bl	80033a2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	200f      	movs	r0, #15
 8000fa6:	f7ff f961 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000faa:	783b      	ldrb	r3, [r7, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4983      	ldr	r1, [pc, #524]	; (80011c0 <printRadioSettings+0x754>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fbc1 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f8c4 	bl	800014c <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f107 0108 	add.w	r1, r7, #8
 8000fcc:	230a      	movs	r3, #10
 8000fce:	4876      	ldr	r0, [pc, #472]	; (80011a8 <printRadioSettings+0x73c>)
 8000fd0:	f002 f9e7 	bl	80033a2 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2010      	movs	r0, #16
 8000fdc:	f7ff f946 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000fe0:	793b      	ldrb	r3, [r7, #4]
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	461d      	mov	r5, r3
 8000fe8:	78bb      	ldrb	r3, [r7, #2]
 8000fea:	787a      	ldrb	r2, [r7, #1]
 8000fec:	7839      	ldrb	r1, [r7, #0]
 8000fee:	f107 0008 	add.w	r0, r7, #8
 8000ff2:	9102      	str	r1, [sp, #8]
 8000ff4:	9201      	str	r2, [sp, #4]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	462b      	mov	r3, r5
 8000ffa:	4622      	mov	r2, r4
 8000ffc:	4971      	ldr	r1, [pc, #452]	; (80011c4 <printRadioSettings+0x758>)
 8000ffe:	f002 fb9d 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff f8a0 	bl	800014c <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	b29a      	uxth	r2, r3
 8001010:	f107 0108 	add.w	r1, r7, #8
 8001014:	230a      	movs	r3, #10
 8001016:	4864      	ldr	r0, [pc, #400]	; (80011a8 <printRadioSettings+0x73c>)
 8001018:	f002 f9c3 	bl	80033a2 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800101c:	2011      	movs	r0, #17
 800101e:	f7ff f8fd 	bl	800021c <NRF24_read_register>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001028:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800102c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4964      	ldr	r1, [pc, #400]	; (80011c8 <printRadioSettings+0x75c>)
 8001036:	4618      	mov	r0, r3
 8001038:	f002 fb80 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f883 	bl	800014c <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	f107 0108 	add.w	r1, r7, #8
 800104e:	230a      	movs	r3, #10
 8001050:	4855      	ldr	r0, [pc, #340]	; (80011a8 <printRadioSettings+0x73c>)
 8001052:	f002 f9a6 	bl	80033a2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001056:	2012      	movs	r0, #18
 8001058:	f7ff f8e0 	bl	800021c <NRF24_read_register>
 800105c:	4603      	mov	r3, r0
 800105e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001062:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4957      	ldr	r1, [pc, #348]	; (80011cc <printRadioSettings+0x760>)
 8001070:	4618      	mov	r0, r3
 8001072:	f002 fb63 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f866 	bl	800014c <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	f107 0108 	add.w	r1, r7, #8
 8001088:	230a      	movs	r3, #10
 800108a:	4847      	ldr	r0, [pc, #284]	; (80011a8 <printRadioSettings+0x73c>)
 800108c:	f002 f989 	bl	80033a2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001090:	2013      	movs	r0, #19
 8001092:	f7ff f8c3 	bl	800021c <NRF24_read_register>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800109c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	4949      	ldr	r1, [pc, #292]	; (80011d0 <printRadioSettings+0x764>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fb46 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f849 	bl	800014c <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f107 0108 	add.w	r1, r7, #8
 80010c2:	230a      	movs	r3, #10
 80010c4:	4838      	ldr	r0, [pc, #224]	; (80011a8 <printRadioSettings+0x73c>)
 80010c6:	f002 f96c 	bl	80033a2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80010ca:	2014      	movs	r0, #20
 80010cc:	f7ff f8a6 	bl	800021c <NRF24_read_register>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80010d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	493c      	ldr	r1, [pc, #240]	; (80011d4 <printRadioSettings+0x768>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fb29 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f82c 	bl	800014c <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f107 0108 	add.w	r1, r7, #8
 80010fc:	230a      	movs	r3, #10
 80010fe:	482a      	ldr	r0, [pc, #168]	; (80011a8 <printRadioSettings+0x73c>)
 8001100:	f002 f94f 	bl	80033a2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001104:	2015      	movs	r0, #21
 8001106:	f7ff f889 	bl	800021c <NRF24_read_register>
 800110a:	4603      	mov	r3, r0
 800110c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001110:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001114:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	492e      	ldr	r1, [pc, #184]	; (80011d8 <printRadioSettings+0x76c>)
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fb0c 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f80f 	bl	800014c <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	b29a      	uxth	r2, r3
 8001132:	f107 0108 	add.w	r1, r7, #8
 8001136:	230a      	movs	r3, #10
 8001138:	481b      	ldr	r0, [pc, #108]	; (80011a8 <printRadioSettings+0x73c>)
 800113a:	f002 f932 	bl	80033a2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800113e:	2016      	movs	r0, #22
 8001140:	f7ff f86c 	bl	800021c <NRF24_read_register>
 8001144:	4603      	mov	r3, r0
 8001146:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800114a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800114e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	4921      	ldr	r1, [pc, #132]	; (80011dc <printRadioSettings+0x770>)
 8001158:	4618      	mov	r0, r3
 800115a:	f002 faef 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4618      	mov	r0, r3
 8001164:	f7fe fff2 	bl	800014c <strlen>
 8001168:	4603      	mov	r3, r0
 800116a:	b29a      	uxth	r2, r3
 800116c:	f107 0108 	add.w	r1, r7, #8
 8001170:	230a      	movs	r3, #10
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <printRadioSettings+0x73c>)
 8001174:	f002 f915 	bl	80033a2 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001178:	201c      	movs	r0, #28
 800117a:	f7ff f84f 	bl	800021c <NRF24_read_register>
 800117e:	4603      	mov	r3, r0
 8001180:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001184:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001188:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800118c:	2b00      	cmp	r3, #0
 800118e:	bfcc      	ite	gt
 8001190:	2301      	movgt	r3, #1
 8001192:	2300      	movle	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001198:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	e01e      	b.n	80011e0 <printRadioSettings+0x774>
 80011a2:	bf00      	nop
 80011a4:	08004140 	.word	0x08004140
 80011a8:	2000011c 	.word	0x2000011c
 80011ac:	08004154 	.word	0x08004154
 80011b0:	08004184 	.word	0x08004184
 80011b4:	080041b4 	.word	0x080041b4
 80011b8:	080041dc 	.word	0x080041dc
 80011bc:	08004204 	.word	0x08004204
 80011c0:	0800422c 	.word	0x0800422c
 80011c4:	08004254 	.word	0x08004254
 80011c8:	08004280 	.word	0x08004280
 80011cc:	0800429c 	.word	0x0800429c
 80011d0:	080042b8 	.word	0x080042b8
 80011d4:	080042d4 	.word	0x080042d4
 80011d8:	080042f0 	.word	0x080042f0
 80011dc:	0800430c 	.word	0x0800430c
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bfcc      	ite	gt
 80011e4:	2301      	movgt	r3, #1
 80011e6:	2300      	movle	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011f0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bfcc      	ite	gt
 80011f8:	2301      	movgt	r3, #1
 80011fa:	2300      	movle	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001200:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001204:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001208:	2b00      	cmp	r3, #0
 800120a:	bfcc      	ite	gt
 800120c:	2301      	movgt	r3, #1
 800120e:	2300      	movle	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001214:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001218:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800121c:	2b00      	cmp	r3, #0
 800121e:	bfcc      	ite	gt
 8001220:	2301      	movgt	r3, #1
 8001222:	2300      	movle	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001228:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800122c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001230:	2b00      	cmp	r3, #0
 8001232:	bfcc      	ite	gt
 8001234:	2301      	movgt	r3, #1
 8001236:	2300      	movle	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f107 0008 	add.w	r0, r7, #8
 800123e:	9303      	str	r3, [sp, #12]
 8001240:	9402      	str	r4, [sp, #8]
 8001242:	9101      	str	r1, [sp, #4]
 8001244:	9200      	str	r2, [sp, #0]
 8001246:	4633      	mov	r3, r6
 8001248:	462a      	mov	r2, r5
 800124a:	494a      	ldr	r1, [pc, #296]	; (8001374 <printRadioSettings+0x908>)
 800124c:	f002 fa76 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4618      	mov	r0, r3
 8001256:	f7fe ff79 	bl	800014c <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	f107 0108 	add.w	r1, r7, #8
 8001262:	230a      	movs	r3, #10
 8001264:	4844      	ldr	r0, [pc, #272]	; (8001378 <printRadioSettings+0x90c>)
 8001266:	f002 f89c 	bl	80033a2 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800126a:	201d      	movs	r0, #29
 800126c:	f7fe ffd6 	bl	800021c <NRF24_read_register>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001276:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00c      	beq.n	800129c <printRadioSettings+0x830>
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4a3d      	ldr	r2, [pc, #244]	; (800137c <printRadioSettings+0x910>)
 8001288:	461c      	mov	r4, r3
 800128a:	4615      	mov	r5, r2
 800128c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001290:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001294:	6020      	str	r0, [r4, #0]
 8001296:	3404      	adds	r4, #4
 8001298:	8021      	strh	r1, [r4, #0]
 800129a:	e00e      	b.n	80012ba <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4a37      	ldr	r2, [pc, #220]	; (8001380 <printRadioSettings+0x914>)
 80012a2:	461c      	mov	r4, r3
 80012a4:	4615      	mov	r5, r2
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012ae:	6020      	str	r0, [r4, #0]
 80012b0:	3404      	adds	r4, #4
 80012b2:	8021      	strh	r1, [r4, #0]
 80012b4:	3402      	adds	r4, #2
 80012b6:	0c0b      	lsrs	r3, r1, #16
 80012b8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4618      	mov	r0, r3
 80012c0:	f7fe ff44 	bl	800014c <strlen>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	f107 0108 	add.w	r1, r7, #8
 80012cc:	230a      	movs	r3, #10
 80012ce:	482a      	ldr	r0, [pc, #168]	; (8001378 <printRadioSettings+0x90c>)
 80012d0:	f002 f867 	bl	80033a2 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80012d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00b      	beq.n	80012f8 <printRadioSettings+0x88c>
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4a27      	ldr	r2, [pc, #156]	; (8001384 <printRadioSettings+0x918>)
 80012e6:	461c      	mov	r4, r3
 80012e8:	4615      	mov	r5, r2
 80012ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f2:	c403      	stmia	r4!, {r0, r1}
 80012f4:	8022      	strh	r2, [r4, #0]
 80012f6:	e00d      	b.n	8001314 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4a22      	ldr	r2, [pc, #136]	; (8001388 <printRadioSettings+0x91c>)
 80012fe:	461c      	mov	r4, r3
 8001300:	4615      	mov	r5, r2
 8001302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001306:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800130a:	c403      	stmia	r4!, {r0, r1}
 800130c:	8022      	strh	r2, [r4, #0]
 800130e:	3402      	adds	r4, #2
 8001310:	0c13      	lsrs	r3, r2, #16
 8001312:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	4618      	mov	r0, r3
 800131a:	f7fe ff17 	bl	800014c <strlen>
 800131e:	4603      	mov	r3, r0
 8001320:	b29a      	uxth	r2, r3
 8001322:	f107 0108 	add.w	r1, r7, #8
 8001326:	230a      	movs	r3, #10
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <printRadioSettings+0x90c>)
 800132a:	f002 f83a 	bl	80033a2 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <printRadioSettings+0x920>)
 8001334:	461c      	mov	r4, r3
 8001336:	4615      	mov	r5, r2
 8001338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001344:	682b      	ldr	r3, [r5, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	8022      	strh	r2, [r4, #0]
 800134a:	3402      	adds	r4, #2
 800134c:	0c1b      	lsrs	r3, r3, #16
 800134e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe fef9 	bl	800014c <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f107 0108 	add.w	r1, r7, #8
 8001362:	230a      	movs	r3, #10
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <printRadioSettings+0x90c>)
 8001366:	f002 f81c 	bl	80033a2 <HAL_UART_Transmit>
}
 800136a:	bf00      	nop
 800136c:	3774      	adds	r7, #116	; 0x74
 800136e:	46bd      	mov	sp, r7
 8001370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001372:	bf00      	nop
 8001374:	08004328 	.word	0x08004328
 8001378:	2000011c 	.word	0x2000011c
 800137c:	08004374 	.word	0x08004374
 8001380:	0800438c 	.word	0x0800438c
 8001384:	080043a4 	.word	0x080043a4
 8001388:	080043c0 	.word	0x080043c0
 800138c:	08003f94 	.word	0x08003f94

08001390 <printStatusReg>:

//2. Print Status
void printStatusReg(void)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b09e      	sub	sp, #120	; 0x78
 8001394:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 8001396:	463b      	mov	r3, r7
 8001398:	4a3b      	ldr	r2, [pc, #236]	; (8001488 <printStatusReg+0xf8>)
 800139a:	461c      	mov	r4, r3
 800139c:	4615      	mov	r5, r2
 800139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013a6:	c407      	stmia	r4!, {r0, r1, r2}
 80013a8:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013aa:	463b      	mov	r3, r7
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe fecd 	bl	800014c <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4639      	mov	r1, r7
 80013b8:	230a      	movs	r3, #10
 80013ba:	4834      	ldr	r0, [pc, #208]	; (800148c <printStatusReg+0xfc>)
 80013bc:	f001 fff1 	bl	80033a2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x07);
 80013c0:	2007      	movs	r0, #7
 80013c2:	f7fe ff2b 	bl	800021c <NRF24_read_register>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 80013cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bfcc      	ite	gt
 80013d8:	2301      	movgt	r3, #1
 80013da:	2300      	movle	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 80013e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013e4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bfcc      	ite	gt
 80013ec:	2301      	movgt	r3, #1
 80013ee:	2300      	movle	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 80013f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013f8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bfcc      	ite	gt
 8001400:	2301      	movgt	r3, #1
 8001402:	2300      	movle	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 8001408:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800140c:	f003 0306 	and.w	r3, r3, #6
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 8001410:	2b00      	cmp	r3, #0
 8001412:	bfcc      	ite	gt
 8001414:	2301      	movgt	r3, #1
 8001416:	2300      	movle	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 800141c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001420:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 8001424:	2b00      	cmp	r3, #0
 8001426:	bfcc      	ite	gt
 8001428:	2301      	movgt	r3, #1
 800142a:	2300      	movle	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	4638      	mov	r0, r7
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	9101      	str	r1, [sp, #4]
 8001434:	9200      	str	r2, [sp, #0]
 8001436:	462b      	mov	r3, r5
 8001438:	4622      	mov	r2, r4
 800143a:	4915      	ldr	r1, [pc, #84]	; (8001490 <printStatusReg+0x100>)
 800143c:	f002 f97e 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001440:	463b      	mov	r3, r7
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fe82 	bl	800014c <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	4639      	mov	r1, r7
 800144e:	230a      	movs	r3, #10
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <printStatusReg+0xfc>)
 8001452:	f001 ffa6 	bl	80033a2 <HAL_UART_Transmit>

	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 8001456:	463b      	mov	r3, r7
 8001458:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <printStatusReg+0xf8>)
 800145a:	461c      	mov	r4, r3
 800145c:	4615      	mov	r5, r2
 800145e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001462:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001466:	c407      	stmia	r4!, {r0, r1, r2}
 8001468:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800146a:	463b      	mov	r3, r7
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe fe6d 	bl	800014c <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	4639      	mov	r1, r7
 8001478:	230a      	movs	r3, #10
 800147a:	4804      	ldr	r0, [pc, #16]	; (800148c <printStatusReg+0xfc>)
 800147c:	f001 ff91 	bl	80033a2 <HAL_UART_Transmit>
}
 8001480:	bf00      	nop
 8001482:	3768      	adds	r7, #104	; 0x68
 8001484:	46bd      	mov	sp, r7
 8001486:	bdb0      	pop	{r4, r5, r7, pc}
 8001488:	080043dc 	.word	0x080043dc
 800148c:	2000011c 	.word	0x2000011c
 8001490:	080043fc 	.word	0x080043fc

08001494 <printConfigReg>:
//3. Print Config
void printConfigReg(void)
{
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b09a      	sub	sp, #104	; 0x68
 8001498:	af00      	add	r7, sp, #0
	uint8_t reg8Val;
	char uartTxBuf[100];

	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 800149a:	463b      	mov	r3, r7
 800149c:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <printConfigReg+0xb4>)
 800149e:	461c      	mov	r4, r3
 80014a0:	4615      	mov	r5, r2
 80014a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014aa:	c407      	stmia	r4!, {r0, r1, r2}
 80014ac:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014ae:	463b      	mov	r3, r7
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fe4b 	bl	800014c <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4639      	mov	r1, r7
 80014bc:	230a      	movs	r3, #10
 80014be:	4823      	ldr	r0, [pc, #140]	; (800154c <printConfigReg+0xb8>)
 80014c0:	f001 ff6f 	bl	80033a2 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x00);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7fe fea9 	bl	800021c <NRF24_read_register>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	sprintf(uartTxBuf, "CONFIG reg:\r\n		PWR_UP:		%d\r\n		PRIM_RX:	%d\r\n",
	_BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<0)));
 80014d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014d4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "CONFIG reg:\r\n		PWR_UP:		%d\r\n		PRIM_RX:	%d\r\n",
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bfcc      	ite	gt
 80014dc:	2301      	movgt	r3, #1
 80014de:	2300      	movle	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<0)));
 80014e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014e8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "CONFIG reg:\r\n		PWR_UP:		%d\r\n		PRIM_RX:	%d\r\n",
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bfcc      	ite	gt
 80014f0:	2301      	movgt	r3, #1
 80014f2:	2300      	movle	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4638      	mov	r0, r7
 80014f8:	4915      	ldr	r1, [pc, #84]	; (8001550 <printConfigReg+0xbc>)
 80014fa:	f002 f91f 	bl	800373c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fe:	463b      	mov	r3, r7
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe fe23 	bl	800014c <strlen>
 8001506:	4603      	mov	r3, r0
 8001508:	b29a      	uxth	r2, r3
 800150a:	4639      	mov	r1, r7
 800150c:	230a      	movs	r3, #10
 800150e:	480f      	ldr	r0, [pc, #60]	; (800154c <printConfigReg+0xb8>)
 8001510:	f001 ff47 	bl	80033a2 <HAL_UART_Transmit>

	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 8001514:	463b      	mov	r3, r7
 8001516:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <printConfigReg+0xb4>)
 8001518:	461c      	mov	r4, r3
 800151a:	4615      	mov	r5, r2
 800151c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001520:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001524:	c407      	stmia	r4!, {r0, r1, r2}
 8001526:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001528:	463b      	mov	r3, r7
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fe0e 	bl	800014c <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	4639      	mov	r1, r7
 8001536:	230a      	movs	r3, #10
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <printConfigReg+0xb8>)
 800153a:	f001 ff32 	bl	80033a2 <HAL_UART_Transmit>
}
 800153e:	bf00      	nop
 8001540:	3768      	adds	r7, #104	; 0x68
 8001542:	46bd      	mov	sp, r7
 8001544:	bdb0      	pop	{r4, r5, r7, pc}
 8001546:	bf00      	nop
 8001548:	080043dc 	.word	0x080043dc
 800154c:	2000011c 	.word	0x2000011c
 8001550:	08004454 	.word	0x08004454

08001554 <nrf24_DebugUART_Init>:

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001554:	b084      	sub	sp, #16
 8001556:	b4b0      	push	{r4, r5, r7}
 8001558:	af00      	add	r7, sp, #0
 800155a:	f107 040c 	add.w	r4, r7, #12
 800155e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <nrf24_DebugUART_Init+0x34>)
 8001564:	461c      	mov	r4, r3
 8001566:	f107 050c 	add.w	r5, r7, #12
 800156a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001576:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800157a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bcb0      	pop	{r4, r5, r7}
 8001584:	b004      	add	sp, #16
 8001586:	4770      	bx	lr
 8001588:	2000011c 	.word	0x2000011c

0800158c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	b097      	sub	sp, #92	; 0x5c
 8001590:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001592:	f000 fa61 	bl	8001a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001596:	f000 f857 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159a:	f000 f8f7 	bl	800178c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800159e:	f000 f8cb 	bl	8001738 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80015a2:	f000 f893 	bl	80016cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  NRF24_begin(CSN_GPIO_Port,GPIO_PIN_9,GPIO_PIN_8,hspi2);
 80015a6:	4c22      	ldr	r4, [pc, #136]	; (8001630 <main+0xa4>)
 80015a8:	4668      	mov	r0, sp
 80015aa:	1d23      	adds	r3, r4, #4
 80015ac:	2254      	movs	r2, #84	; 0x54
 80015ae:	4619      	mov	r1, r3
 80015b0:	f002 f8b0 	bl	8003714 <memcpy>
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015be:	481d      	ldr	r0, [pc, #116]	; (8001634 <main+0xa8>)
 80015c0:	f7fe ff06 	bl	80003d0 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 80015c4:	4e1c      	ldr	r6, [pc, #112]	; (8001638 <main+0xac>)
 80015c6:	466d      	mov	r5, sp
 80015c8:	f106 0410 	add.w	r4, r6, #16
 80015cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015e0:	f7ff ffb8 	bl	8001554 <nrf24_DebugUART_Init>

  printRadioSettings();
 80015e4:	f7ff fa42 	bl	8000a6c <printRadioSettings>

  NRF24_stopListening();
 80015e8:	f7fe ffd2 	bl	8000590 <NRF24_stopListening>
  NRF24_openWritingPipe(TxpipeAddrs);
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <main+0xb0>)
 80015ee:	cb18      	ldmia	r3, {r3, r4}
 80015f0:	4618      	mov	r0, r3
 80015f2:	4621      	mov	r1, r4
 80015f4:	f7ff f830 	bl	8000658 <NRF24_openWritingPipe>
  NRF24_setAutoAck(1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff f8b7 	bl	800076c <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80015fe:	2034      	movs	r0, #52	; 0x34
 8001600:	f7ff f869 	bl	80006d6 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8001604:	2020      	movs	r0, #32
 8001606:	f7ff f87b 	bl	8000700 <NRF24_setPayloadSize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(NRF24_write(myTxData,32))
 800160a:	2120      	movs	r1, #32
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <main+0xb4>)
 800160e:	f7fe ffcb 	bl	80005a8 <NRF24_write>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f8      	beq.n	800160a <main+0x7e>
	  {
	 	 {
	 		 HAL_UART_Transmit(&huart2,(uint8_t *)"Transmitted Successfully\r\n",strlen("Transmitted Successfully\r\n"),10);
 8001618:	230a      	movs	r3, #10
 800161a:	221a      	movs	r2, #26
 800161c:	4909      	ldr	r1, [pc, #36]	; (8001644 <main+0xb8>)
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <main+0xac>)
 8001620:	f001 febf 	bl	80033a2 <HAL_UART_Transmit>
	 	 }
	 	  HAL_Delay(1000);
 8001624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001628:	f000 fa78 	bl	8001b1c <HAL_Delay>
	  if(NRF24_write(myTxData,32))
 800162c:	e7ed      	b.n	800160a <main+0x7e>
 800162e:	bf00      	nop
 8001630:	20000168 	.word	0x20000168
 8001634:	40010c00 	.word	0x40010c00
 8001638:	200001c0 	.word	0x200001c0
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	080044d8 	.word	0x080044d8

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b090      	sub	sp, #64	; 0x40
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	2228      	movs	r2, #40	; 0x28
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f002 f867 	bl	800372a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166e:	2301      	movs	r3, #1
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001672:	2310      	movs	r3, #16
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001676:	2302      	movs	r3, #2
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800167a:	2300      	movs	r3, #0
 800167c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800167e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fcbd 	bl	8002008 <HAL_RCC_OscConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001694:	f000 f8ba 	bl	800180c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001698:	230f      	movs	r3, #15
 800169a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169c:	2302      	movs	r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2102      	movs	r1, #2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 ff28 	bl	8002508 <HAL_RCC_ClockConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80016be:	f000 f8a5 	bl	800180c <Error_Handler>
  }
}
 80016c2:	bf00      	nop
 80016c4:	3740      	adds	r7, #64	; 0x40
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_SPI2_Init+0x64>)
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <MX_SPI2_Init+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI2_Init+0x64>)
 80016d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI2_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_SPI2_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI2_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI2_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI2_Init+0x64>)
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI2_Init+0x64>)
 8001700:	2220      	movs	r2, #32
 8001702:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_SPI2_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI2_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_SPI2_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI2_Init+0x64>)
 8001718:	220a      	movs	r2, #10
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_SPI2_Init+0x64>)
 800171e:	f001 f88f 	bl	8002840 <HAL_SPI_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001728:	f000 f870 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000168 	.word	0x20000168
 8001734:	40003800 	.word	0x40003800

08001738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <MX_USART2_UART_Init+0x50>)
 8001740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001770:	f001 fdca 	bl	8003308 <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800177a:	f000 f847 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200001c0 	.word	0x200001c0
 8001788:	40004400 	.word	0x40004400

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <MX_GPIO_Init+0x78>)
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_GPIO_Init+0x78>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_GPIO_Init+0x78>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_GPIO_Init+0x78>)
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_GPIO_Init+0x78>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_GPIO_Init+0x78>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017d6:	480c      	ldr	r0, [pc, #48]	; (8001808 <MX_GPIO_Init+0x7c>)
 80017d8:	f000 fbfe 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 80017dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2302      	movs	r3, #2
 80017ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	4619      	mov	r1, r3
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_GPIO_Init+0x7c>)
 80017f6:	f000 fa95 	bl	8001d24 <HAL_GPIO_Init>

}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	40010c00 	.word	0x40010c00

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001812:	e7fe      	b.n	8001812 <Error_Handler+0x6>

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <HAL_MspInit+0x5c>)
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_MspInit+0x5c>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_MspInit+0x5c>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_MspInit+0x5c>)
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_MspInit+0x5c>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_MspInit+0x5c>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_MspInit+0x60>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_MspInit+0x60>)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000
 8001874:	40010000 	.word	0x40010000

08001878 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <HAL_SPI_MspInit+0x8c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d131      	bne.n	80018fc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <HAL_SPI_MspInit+0x90>)
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_SPI_MspInit+0x90>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a2:	61d3      	str	r3, [r2, #28]
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_SPI_MspInit+0x90>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	4a15      	ldr	r2, [pc, #84]	; (8001908 <HAL_SPI_MspInit+0x90>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_SPI_MspInit+0x90>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_SPI_MspInit+0x90>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80018c8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80018cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 0310 	add.w	r3, r7, #16
 80018da:	4619      	mov	r1, r3
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <HAL_SPI_MspInit+0x94>)
 80018de:	f000 fa21 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4619      	mov	r1, r3
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_SPI_MspInit+0x94>)
 80018f8:	f000 fa14 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40003800 	.word	0x40003800
 8001908:	40021000 	.word	0x40021000
 800190c:	40010c00 	.word	0x40010c00

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_UART_MspInit+0x88>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d12f      	bne.n	8001990 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193a:	61d3      	str	r3, [r2, #28]
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_UART_MspInit+0x8c>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_UART_MspInit+0x8c>)
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_UART_MspInit+0x8c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001960:	2304      	movs	r3, #4
 8001962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <HAL_UART_MspInit+0x90>)
 8001974:	f000 f9d6 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001978:	2308      	movs	r3, #8
 800197a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_UART_MspInit+0x90>)
 800198c:	f000 f9ca 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40004400 	.word	0x40004400
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010800 	.word	0x40010800

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ea:	f000 f87b 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <_sbrk+0x50>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x16>
		heap_end = &end;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <_sbrk+0x50>)
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <_sbrk+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <_sbrk+0x50>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <_sbrk+0x50>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	466a      	mov	r2, sp
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d907      	bls.n	8001a2e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001a1e:	f001 fe4f 	bl	80036c0 <__errno>
 8001a22:	4602      	mov	r2, r0
 8001a24:	230c      	movs	r3, #12
 8001a26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	e006      	b.n	8001a3c <_sbrk+0x48>
	}

	heap_end += incr;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <_sbrk+0x50>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <_sbrk+0x50>)
 8001a38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000015c 	.word	0x2000015c
 8001a48:	20000208 	.word	0x20000208

08001a4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a5c:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <HAL_Init+0x28>)
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_Init+0x28>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f043 0310 	orr.w	r3, r3, #16
 8001a66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f000 f927 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f000 f808 	bl	8001a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a74:	f7ff fece 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40022000 	.word	0x40022000

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x54>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x58>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f931 	bl	8001d0a <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00e      	b.n	8001ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d80a      	bhi.n	8001ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f907 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <HAL_InitTick+0x5c>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000028 	.word	0x20000028
 8001adc:	20000030 	.word	0x20000030
 8001ae0:	2000002c 	.word	0x2000002c

08001ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_IncTick+0x1c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_IncTick+0x20>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <HAL_IncTick+0x20>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	20000030 	.word	0x20000030
 8001b04:	20000200 	.word	0x20000200

08001b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <HAL_GetTick+0x10>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000200 	.word	0x20000200

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_Delay+0x40>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffe0 	bl	8001b08 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad2      	subs	r2, r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3f7      	bcc.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000030 	.word	0x20000030

08001b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	60d3      	str	r3, [r2, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 0307 	and.w	r3, r3, #7
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	490d      	ldr	r1, [pc, #52]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	4909      	ldr	r1, [pc, #36]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	1e5a      	subs	r2, r3, #1
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	401a      	ands	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5e:	2101      	movs	r1, #1
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	1e59      	subs	r1, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff92 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff4b 	bl	8001b60 <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff60 	bl	8001ba8 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff92 	bl	8001c18 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff61 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffb0 	bl	8001c78 <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	e127      	b.n	8001f88 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8116 	bne.w	8001f82 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d034      	beq.n	8001dc8 <HAL_GPIO_Init+0xa4>
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d80d      	bhi.n	8001d7e <HAL_GPIO_Init+0x5a>
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d02b      	beq.n	8001dbe <HAL_GPIO_Init+0x9a>
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d804      	bhi.n	8001d74 <HAL_GPIO_Init+0x50>
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d031      	beq.n	8001dd2 <HAL_GPIO_Init+0xae>
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d01c      	beq.n	8001dac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d72:	e048      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d043      	beq.n	8001e00 <HAL_GPIO_Init+0xdc>
 8001d78:	2b11      	cmp	r3, #17
 8001d7a:	d01b      	beq.n	8001db4 <HAL_GPIO_Init+0x90>
          break;
 8001d7c:	e043      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d7e:	4a89      	ldr	r2, [pc, #548]	; (8001fa4 <HAL_GPIO_Init+0x280>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d026      	beq.n	8001dd2 <HAL_GPIO_Init+0xae>
 8001d84:	4a87      	ldr	r2, [pc, #540]	; (8001fa4 <HAL_GPIO_Init+0x280>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d806      	bhi.n	8001d98 <HAL_GPIO_Init+0x74>
 8001d8a:	4a87      	ldr	r2, [pc, #540]	; (8001fa8 <HAL_GPIO_Init+0x284>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d020      	beq.n	8001dd2 <HAL_GPIO_Init+0xae>
 8001d90:	4a86      	ldr	r2, [pc, #536]	; (8001fac <HAL_GPIO_Init+0x288>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01d      	beq.n	8001dd2 <HAL_GPIO_Init+0xae>
          break;
 8001d96:	e036      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d98:	4a85      	ldr	r2, [pc, #532]	; (8001fb0 <HAL_GPIO_Init+0x28c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d019      	beq.n	8001dd2 <HAL_GPIO_Init+0xae>
 8001d9e:	4a85      	ldr	r2, [pc, #532]	; (8001fb4 <HAL_GPIO_Init+0x290>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d016      	beq.n	8001dd2 <HAL_GPIO_Init+0xae>
 8001da4:	4a84      	ldr	r2, [pc, #528]	; (8001fb8 <HAL_GPIO_Init+0x294>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0xae>
          break;
 8001daa:	e02c      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e028      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	3304      	adds	r3, #4
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e023      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	623b      	str	r3, [r7, #32]
          break;
 8001dc6:	e01e      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	330c      	adds	r3, #12
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e019      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	623b      	str	r3, [r7, #32]
          break;
 8001dde:	e012      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de8:	2308      	movs	r3, #8
 8001dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	611a      	str	r2, [r3, #16]
          break;
 8001df2:	e008      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df4:	2308      	movs	r3, #8
 8001df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	615a      	str	r2, [r3, #20]
          break;
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
          break;
 8001e04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2bff      	cmp	r3, #255	; 0xff
 8001e0a:	d801      	bhi.n	8001e10 <HAL_GPIO_Init+0xec>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	e001      	b.n	8001e14 <HAL_GPIO_Init+0xf0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3304      	adds	r3, #4
 8001e14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2bff      	cmp	r3, #255	; 0xff
 8001e1a:	d802      	bhi.n	8001e22 <HAL_GPIO_Init+0xfe>
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_Init+0x104>
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	3b08      	subs	r3, #8
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	210f      	movs	r1, #15
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	401a      	ands	r2, r3
 8001e3a:	6a39      	ldr	r1, [r7, #32]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	431a      	orrs	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8096 	beq.w	8001f82 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e56:	4a59      	ldr	r2, [pc, #356]	; (8001fbc <HAL_GPIO_Init+0x298>)
 8001e58:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <HAL_GPIO_Init+0x298>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6193      	str	r3, [r2, #24]
 8001e62:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <HAL_GPIO_Init+0x298>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e6e:	4a54      	ldr	r2, [pc, #336]	; (8001fc0 <HAL_GPIO_Init+0x29c>)
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4b      	ldr	r2, [pc, #300]	; (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0x19e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4a      	ldr	r2, [pc, #296]	; (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <HAL_GPIO_Init+0x19a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a49      	ldr	r2, [pc, #292]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <HAL_GPIO_Init+0x196>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a48      	ldr	r2, [pc, #288]	; (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_GPIO_Init+0x192>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x1a0>
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e004      	b.n	8001ec4 <HAL_GPIO_Init+0x1a0>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e002      	b.n	8001ec4 <HAL_GPIO_Init+0x1a0>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_GPIO_Init+0x1a0>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec6:	f002 0203 	and.w	r2, r2, #3
 8001eca:	0092      	lsls	r2, r2, #2
 8001ecc:	4093      	lsls	r3, r2
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ed4:	493a      	ldr	r1, [pc, #232]	; (8001fc0 <HAL_GPIO_Init+0x29c>)
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	3302      	adds	r3, #2
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eee:	4939      	ldr	r1, [pc, #228]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001ef0:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
 8001efa:	e006      	b.n	8001f0a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001efc:	4935      	ldr	r1, [pc, #212]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001efe:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4013      	ands	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d006      	beq.n	8001f24 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f16:	492f      	ldr	r1, [pc, #188]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f18:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f24:	492b      	ldr	r1, [pc, #172]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f26:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4013      	ands	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f3e:	4925      	ldr	r1, [pc, #148]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
 8001f4a:	e006      	b.n	8001f5a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f4c:	4921      	ldr	r1, [pc, #132]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	4013      	ands	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f66:	491b      	ldr	r1, [pc, #108]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60cb      	str	r3, [r1, #12]
 8001f72:	e006      	b.n	8001f82 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f74:	4917      	ldr	r1, [pc, #92]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	3301      	adds	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f47f aed0 	bne.w	8001d38 <HAL_GPIO_Init+0x14>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	372c      	adds	r7, #44	; 0x2c
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	10210000 	.word	0x10210000
 8001fa8:	10110000 	.word	0x10110000
 8001fac:	10120000 	.word	0x10120000
 8001fb0:	10310000 	.word	0x10310000
 8001fb4:	10320000 	.word	0x10320000
 8001fb8:	10220000 	.word	0x10220000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	40010800 	.word	0x40010800
 8001fc8:	40010c00 	.word	0x40010c00
 8001fcc:	40011000 	.word	0x40011000
 8001fd0:	40011400 	.word	0x40011400
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ff4:	e003      	b.n	8001ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	041a      	lsls	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	611a      	str	r2, [r3, #16]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e26c      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8087 	beq.w	8002136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	4b92      	ldr	r3, [pc, #584]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b04      	cmp	r3, #4
 8002032:	d00c      	beq.n	800204e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002034:	4b8f      	ldr	r3, [pc, #572]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d112      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
 8002040:	4b8c      	ldr	r3, [pc, #560]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06c      	beq.n	8002134 <HAL_RCC_OscConfig+0x12c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d168      	bne.n	8002134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e246      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x76>
 8002070:	4a80      	ldr	r2, [pc, #512]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002072:	4b80      	ldr	r3, [pc, #512]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e02e      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4a7b      	ldr	r2, [pc, #492]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002088:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4a78      	ldr	r2, [pc, #480]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002094:	4b77      	ldr	r3, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0xbc>
 80020aa:	4a72      	ldr	r2, [pc, #456]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	4b71      	ldr	r3, [pc, #452]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4a6f      	ldr	r2, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	4b6e      	ldr	r3, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020c4:	4a6b      	ldr	r2, [pc, #428]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	4b6b      	ldr	r3, [pc, #428]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4a68      	ldr	r2, [pc, #416]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff fd10 	bl	8001b08 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fd0c 	bl	8001b08 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1fa      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xe4>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fcfc 	bl	8001b08 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff fcf8 	bl	8001b08 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1e6      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x10c>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214e:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1ba      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	493d      	ldr	r1, [pc, #244]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002180:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff fcb1 	bl	8001b08 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7ff fcad 	bl	8001b08 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e19b      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	492a      	ldr	r1, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff fc90 	bl	8001b08 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7ff fc8c 	bl	8001b08 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e17a      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03a      	beq.n	800228c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d019      	beq.n	8002252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7ff fc70 	bl	8001b08 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7ff fc6c 	bl	8001b08 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e15a      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 fada 	bl	8002804 <RCC_Delay>
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff fc56 	bl	8001b08 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fc52 	bl	8001b08 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d908      	bls.n	8002280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e140      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	42420000 	.word	0x42420000
 800227c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b9e      	ldr	r3, [pc, #632]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e9      	bne.n	8002260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a6 	beq.w	80023e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b97      	ldr	r3, [pc, #604]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4a94      	ldr	r2, [pc, #592]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	4b93      	ldr	r3, [pc, #588]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b91      	ldr	r3, [pc, #580]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b8e      	ldr	r3, [pc, #568]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4a8b      	ldr	r2, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022d4:	4b8a      	ldr	r3, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7ff fc13 	bl	8001b08 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7ff fc0f 	bl	8001b08 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	; 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0fd      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x312>
 800230c:	4a7b      	ldr	r2, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800230e:	4b7b      	ldr	r3, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e02d      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x334>
 8002322:	4a76      	ldr	r2, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002324:	4b75      	ldr	r3, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4a73      	ldr	r2, [pc, #460]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002330:	4b72      	ldr	r3, [pc, #456]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	e01c      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x356>
 8002344:	4a6d      	ldr	r2, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002346:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4a6a      	ldr	r2, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002352:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800235e:	4a67      	ldr	r2, [pc, #412]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002360:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4a64      	ldr	r2, [pc, #400]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800236c:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7ff fbc3 	bl	8001b08 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7ff fbbf 	bl	8001b08 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0ab      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RCC_OscConfig+0x37e>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7ff fbad 	bl	8001b08 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7ff fba9 	bl	8001b08 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e095      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4a48      	ldr	r2, [pc, #288]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8081 	beq.w	80024f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d061      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d146      	bne.n	8002492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff fb7d 	bl	8001b08 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7ff fb79 	bl	8001b08 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e067      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	4b35      	ldr	r3, [pc, #212]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243a:	4930      	ldr	r1, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	482b      	ldr	r0, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800244e:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a19      	ldr	r1, [r3, #32]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	430b      	orrs	r3, r1
 8002460:	4313      	orrs	r3, r2
 8002462:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7ff fb4d 	bl	8001b08 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7ff fb49 	bl	8001b08 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e037      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x46a>
 8002490:	e02f      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff fb36 	bl	8001b08 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff fb32 	bl	8001b08 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e020      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x498>
 80024be:	e018      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e013      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	40007000 	.word	0x40007000
 8002504:	42420060 	.word	0x42420060

08002508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d0      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0207 	and.w	r2, r3, #7
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d210      	bcs.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4967      	ldr	r1, [pc, #412]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	4b66      	ldr	r3, [pc, #408]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 0207 	bic.w	r2, r3, #7
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0207 	and.w	r2, r3, #7
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4a59      	ldr	r2, [pc, #356]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4b59      	ldr	r3, [pc, #356]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800256e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4a53      	ldr	r2, [pc, #332]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4950      	ldr	r1, [pc, #320]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d040      	beq.n	8002628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d115      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e073      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06b      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4939      	ldr	r1, [pc, #228]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	4b38      	ldr	r3, [pc, #224]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 0203 	bic.w	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f8:	f7ff fa86 	bl	8001b08 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff fa82 	bl	8001b08 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e053      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0207 	and.w	r2, r3, #7
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d910      	bls.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4924      	ldr	r1, [pc, #144]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 0207 	bic.w	r2, r3, #7
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0207 	and.w	r2, r3, #7
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4919      	ldr	r1, [pc, #100]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002682:	4912      	ldr	r1, [pc, #72]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4601      	mov	r1, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
 80026aa:	fa21 f303 	lsr.w	r3, r1, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1cc>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1d0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f9e4 	bl	8001a84 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08004508 	.word	0x08004508
 80026d4:	20000028 	.word	0x20000028
 80026d8:	2000002c 	.word	0x2000002c

080026dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b490      	push	{r4, r7}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026e2:	4b2a      	ldr	r3, [pc, #168]	; (800278c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026e4:	1d3c      	adds	r4, r7, #4
 80026e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b04      	cmp	r3, #4
 8002714:	d002      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x40>
 8002716:	2b08      	cmp	r3, #8
 8002718:	d003      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x46>
 800271a:	e02d      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800271e:	623b      	str	r3, [r7, #32]
      break;
 8002720:	e02d      	b.n	800277e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	0c9b      	lsrs	r3, r3, #18
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800272e:	4413      	add	r3, r2
 8002730:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002734:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	0c5b      	lsrs	r3, r3, #17
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800274e:	4413      	add	r3, r2
 8002750:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002754:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800275a:	fb02 f203 	mul.w	r2, r2, r3
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	e004      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	4a0c      	ldr	r2, [pc, #48]	; (800279c <HAL_RCC_GetSysClockFreq+0xc0>)
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	623b      	str	r3, [r7, #32]
      break;
 8002776:	e002      	b.n	800277e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800277a:	623b      	str	r3, [r7, #32]
      break;
 800277c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277e:	6a3b      	ldr	r3, [r7, #32]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc90      	pop	{r4, r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	080044f4 	.word	0x080044f4
 8002790:	08004504 	.word	0x08004504
 8002794:	40021000 	.word	0x40021000
 8002798:	007a1200 	.word	0x007a1200
 800279c:	003d0900 	.word	0x003d0900

080027a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a4:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	20000028 	.word	0x20000028

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b8:	f7ff fff2 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027bc:	4601      	mov	r1, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4a03      	ldr	r2, [pc, #12]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	08004518 	.word	0x08004518

080027dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027e0:	f7ff ffde 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027e4:	4601      	mov	r1, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0adb      	lsrs	r3, r3, #11
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4a03      	ldr	r2, [pc, #12]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	08004518 	.word	0x08004518

08002804 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <RCC_Delay+0x34>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <RCC_Delay+0x38>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0a5b      	lsrs	r3, r3, #9
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002820:	bf00      	nop
  }
  while (Delay --);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	60fa      	str	r2, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <RCC_Delay+0x1c>
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000028 	.word	0x20000028
 800283c:	10624dd3 	.word	0x10624dd3

08002840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e075      	b.n	800293e <HAL_SPI_Init+0xfe>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d108      	bne.n	800286c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002862:	d009      	beq.n	8002878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
 800286a:	e005      	b.n	8002878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fff0 	bl	8001878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6852      	ldr	r2, [r2, #4]
 80028b8:	f402 7182 	and.w	r1, r2, #260	; 0x104
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6892      	ldr	r2, [r2, #8]
 80028c0:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6912      	ldr	r2, [r2, #16]
 80028d4:	f002 0202 	and.w	r2, r2, #2
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6952      	ldr	r2, [r2, #20]
 80028de:	f002 0201 	and.w	r2, r2, #1
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6992      	ldr	r2, [r2, #24]
 80028e8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80028ec:	4311      	orrs	r1, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	69d2      	ldr	r2, [r2, #28]
 80028f2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6a12      	ldr	r2, [r2, #32]
 80028fc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002900:	4311      	orrs	r1, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002906:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6992      	ldr	r2, [r2, #24]
 8002916:	0c12      	lsrs	r2, r2, #16
 8002918:	f002 0204 	and.w	r2, r2, #4
 800291c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	69d2      	ldr	r2, [r2, #28]
 8002928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b088      	sub	sp, #32
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_SPI_Transmit+0x22>
 8002964:	2302      	movs	r3, #2
 8002966:	e124      	b.n	8002bb2 <HAL_SPI_Transmit+0x26c>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002970:	f7ff f8ca 	bl	8001b08 <HAL_GetTick>
 8002974:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d002      	beq.n	800298c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	77fb      	strb	r3, [r7, #31]
    goto error;
 800298a:	e109      	b.n	8002ba0 <HAL_SPI_Transmit+0x25a>
  }

  if ((pData == NULL) || (Size == 0U))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_SPI_Transmit+0x52>
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800299c:	e100      	b.n	8002ba0 <HAL_SPI_Transmit+0x25a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2203      	movs	r2, #3
 80029a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e4:	d10f      	bne.n	8002a06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	d007      	beq.n	8002a24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a2c:	d14b      	bne.n	8002ac6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_SPI_Transmit+0xf6>
 8002a36:	8afb      	ldrh	r3, [r7, #22]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d13e      	bne.n	8002aba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a44:	8812      	ldrh	r2, [r2, #0]
 8002a46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	1c9a      	adds	r2, r3, #2
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a60:	e02b      	b.n	8002aba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d112      	bne.n	8002a96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a78:	8812      	ldrh	r2, [r2, #0]
 8002a7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	1c9a      	adds	r2, r3, #2
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a94:	e011      	b.n	8002aba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a96:	f7ff f837 	bl	8001b08 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d303      	bcc.n	8002aae <HAL_SPI_Transmit+0x168>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_Transmit+0x16e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ab8:	e072      	b.n	8002ba0 <HAL_SPI_Transmit+0x25a>
    while (hspi->TxXferCount > 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ce      	bne.n	8002a62 <HAL_SPI_Transmit+0x11c>
 8002ac4:	e04c      	b.n	8002b60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_SPI_Transmit+0x18e>
 8002ace:	8afb      	ldrh	r3, [r7, #22]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d140      	bne.n	8002b56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	330c      	adds	r3, #12
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002afa:	e02c      	b.n	8002b56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d113      	bne.n	8002b32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b14:	7812      	ldrb	r2, [r2, #0]
 8002b16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b30:	e011      	b.n	8002b56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b32:	f7fe ffe9 	bl	8001b08 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1ad2      	subs	r2, r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d303      	bcc.n	8002b4a <HAL_SPI_Transmit+0x204>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d102      	bne.n	8002b50 <HAL_SPI_Transmit+0x20a>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b54:	e024      	b.n	8002ba0 <HAL_SPI_Transmit+0x25a>
    while (hspi->TxXferCount > 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1cd      	bne.n	8002afc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fbb1 	bl	80032cc <SPI_EndRxTxTransaction>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_SPI_Transmit+0x25a>
  {
    errorcode = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b088      	sub	sp, #32
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd6:	d112      	bne.n	8002bfe <HAL_SPI_Receive+0x44>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10e      	bne.n	8002bfe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2204      	movs	r2, #4
 8002be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f8ee 	bl	8002dd6 <HAL_SPI_TransmitReceive>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	e0e7      	b.n	8002dce <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_SPI_Receive+0x52>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e0e0      	b.n	8002dce <HAL_SPI_Receive+0x214>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c14:	f7fe ff78 	bl	8001b08 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d002      	beq.n	8002c2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
 8002c28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c2a:	e0c7      	b.n	8002dbc <HAL_SPI_Receive+0x202>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_SPI_Receive+0x7e>
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c3c:	e0be      	b.n	8002dbc <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2204      	movs	r2, #4
 8002c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c84:	d10f      	bne.n	8002ca6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d007      	beq.n	8002cc4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d161      	bne.n	8002d90 <HAL_SPI_Receive+0x1d6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ccc:	e02d      	b.n	8002d2a <HAL_SPI_Receive+0x170>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d114      	bne.n	8002d06 <HAL_SPI_Receive+0x14c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	320c      	adds	r2, #12
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d04:	e011      	b.n	8002d2a <HAL_SPI_Receive+0x170>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d06:	f7fe feff 	bl	8001b08 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad2      	subs	r2, r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d303      	bcc.n	8002d1e <HAL_SPI_Receive+0x164>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d102      	bne.n	8002d24 <HAL_SPI_Receive+0x16a>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <HAL_SPI_Receive+0x170>
        {
          errorcode = HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d28:	e048      	b.n	8002dbc <HAL_SPI_Receive+0x202>
    while (hspi->RxXferCount > 0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1cc      	bne.n	8002cce <HAL_SPI_Receive+0x114>
 8002d34:	e031      	b.n	8002d9a <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d113      	bne.n	8002d6c <HAL_SPI_Receive+0x1b2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	68d2      	ldr	r2, [r2, #12]
 8002d4e:	b292      	uxth	r2, r2
 8002d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	1c9a      	adds	r2, r3, #2
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d6a:	e011      	b.n	8002d90 <HAL_SPI_Receive+0x1d6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d6c:	f7fe fecc 	bl	8001b08 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad2      	subs	r2, r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d303      	bcc.n	8002d84 <HAL_SPI_Receive+0x1ca>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d102      	bne.n	8002d8a <HAL_SPI_Receive+0x1d0>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_SPI_Receive+0x1d6>
        {
          errorcode = HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d8e:	e015      	b.n	8002dbc <HAL_SPI_Receive+0x202>
    while (hspi->RxXferCount > 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1cd      	bne.n	8002d36 <HAL_SPI_Receive+0x17c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	6839      	ldr	r1, [r7, #0]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fa42 	bl	8003228 <SPI_EndRxTransaction>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_SPI_Receive+0x1f6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b08c      	sub	sp, #48	; 0x30
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002de4:	2301      	movs	r3, #1
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x26>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e188      	b.n	800310e <HAL_SPI_TransmitReceive+0x338>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e04:	f7fe fe80 	bl	8001b08 <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d00f      	beq.n	8002e46 <HAL_SPI_TransmitReceive+0x70>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e2c:	d107      	bne.n	8002e3e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <HAL_SPI_TransmitReceive+0x68>
 8002e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d003      	beq.n	8002e46 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e44:	e159      	b.n	80030fa <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_SPI_TransmitReceive+0x82>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_SPI_TransmitReceive+0x82>
 8002e52:	887b      	ldrh	r3, [r7, #2]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d103      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e5e:	e14c      	b.n	80030fa <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d003      	beq.n	8002e74 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2205      	movs	r2, #5
 8002e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	887a      	ldrh	r2, [r7, #2]
 8002e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	887a      	ldrh	r2, [r7, #2]
 8002e96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d007      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed0:	d178      	bne.n	8002fc4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_SPI_TransmitReceive+0x10a>
 8002eda:	8b7b      	ldrh	r3, [r7, #26]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d166      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ee8:	8812      	ldrh	r2, [r2, #0]
 8002eea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	1c9a      	adds	r2, r3, #2
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f04:	e053      	b.n	8002fae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d11b      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x176>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0x176>
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d113      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f2c:	8812      	ldrh	r2, [r2, #0]
 8002f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d119      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x1b8>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d014      	beq.n	8002f8e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	68d2      	ldr	r2, [r2, #12]
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	1c9a      	adds	r2, r3, #2
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f8e:	f7fe fdbb 	bl	8001b08 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	1ad2      	subs	r2, r2, r3
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d307      	bcc.n	8002fae <HAL_SPI_TransmitReceive+0x1d8>
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d003      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fac:	e0a5      	b.n	80030fa <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1a6      	bne.n	8002f06 <HAL_SPI_TransmitReceive+0x130>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1a1      	bne.n	8002f06 <HAL_SPI_TransmitReceive+0x130>
 8002fc2:	e07c      	b.n	80030be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x1fc>
 8002fcc:	8b7b      	ldrh	r3, [r7, #26]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d16b      	bne.n	80030aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff8:	e057      	b.n	80030aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d11c      	bne.n	8003042 <HAL_SPI_TransmitReceive+0x26c>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d017      	beq.n	8003042 <HAL_SPI_TransmitReceive+0x26c>
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d114      	bne.n	8003042 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b01      	cmp	r3, #1
 800304e:	d119      	bne.n	8003084 <HAL_SPI_TransmitReceive+0x2ae>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d014      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	68d2      	ldr	r2, [r2, #12]
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003080:	2301      	movs	r3, #1
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003084:	f7fe fd40 	bl	8001b08 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	1ad2      	subs	r2, r2, r3
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	429a      	cmp	r2, r3
 8003092:	d303      	bcc.n	800309c <HAL_SPI_TransmitReceive+0x2c6>
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309a:	d102      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x2cc>
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030a8:	e027      	b.n	80030fa <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1a2      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x224>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d19d      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f902 	bl	80032cc <SPI_EndRxTxTransaction>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030da:	e00e      	b.n	80030fa <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800310a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800310e:	4618      	mov	r0, r3
 8003110:	3730      	adds	r7, #48	; 0x30
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003128:	f7fe fcee 	bl	8001b08 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	1a9a      	subs	r2, r3, r2
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	4413      	add	r3, r2
 8003136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003138:	f7fe fce6 	bl	8001b08 <HAL_GetTick>
 800313c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	015b      	lsls	r3, r3, #5
 8003144:	0d1b      	lsrs	r3, r3, #20
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800314e:	e054      	b.n	80031fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d050      	beq.n	80031fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003158:	f7fe fcd6 	bl	8001b08 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	1ad2      	subs	r2, r2, r3
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	429a      	cmp	r2, r3
 8003166:	d202      	bcs.n	800316e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d13d      	bne.n	80031ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	6852      	ldr	r2, [r2, #4]
 8003178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800317c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003186:	d111      	bne.n	80031ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003190:	d004      	beq.n	800319c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d107      	bne.n	80031ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b4:	d10f      	bne.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e017      	b.n	800321a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	401a      	ands	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	429a      	cmp	r2, r3
 8003216:	d19b      	bne.n	8003150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000028 	.word	0x20000028

08003228 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323c:	d111      	bne.n	8003262 <SPI_EndRxTransaction+0x3a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003246:	d004      	beq.n	8003252 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003250:	d107      	bne.n	8003262 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003260:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326a:	d117      	bne.n	800329c <SPI_EndRxTransaction+0x74>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d112      	bne.n	800329c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2200      	movs	r2, #0
 800327e:	2101      	movs	r1, #1
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7ff ff49 	bl	8003118 <SPI_WaitFlagStateUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01a      	beq.n	80032c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e013      	b.n	80032c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff ff36 	bl	8003118 <SPI_WaitFlagStateUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e000      	b.n	80032c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2200      	movs	r2, #0
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff ff18 	bl	8003118 <SPI_WaitFlagStateUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e000      	b.n	8003300 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e03f      	b.n	800339a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe faee 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	68d2      	ldr	r2, [r2, #12]
 8003346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f903 	bl	8003558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	6912      	ldr	r2, [r2, #16]
 800335c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	6952      	ldr	r2, [r2, #20]
 800336c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	68d2      	ldr	r2, [r2, #12]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08a      	sub	sp, #40	; 0x28
 80033a6:	af02      	add	r7, sp, #8
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d17b      	bne.n	80034ba <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_UART_Transmit+0x2c>
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e074      	b.n	80034bc <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_UART_Transmit+0x3e>
 80033dc:	2302      	movs	r3, #2
 80033de:	e06d      	b.n	80034bc <HAL_UART_Transmit+0x11a>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2221      	movs	r2, #33	; 0x21
 80033f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033f6:	f7fe fb87 	bl	8001b08 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	88fa      	ldrh	r2, [r7, #6]
 8003406:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003410:	d108      	bne.n	8003424 <HAL_UART_Transmit+0x82>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d104      	bne.n	8003424 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	e003      	b.n	800342c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003434:	e029      	b.n	800348a <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	2180      	movs	r1, #128	; 0x80
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f83f 	bl	80034c4 <UART_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e035      	b.n	80034bc <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	8812      	ldrh	r2, [r2, #0]
 800345e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003462:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	3302      	adds	r3, #2
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	e007      	b.n	800347c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	7812      	ldrb	r2, [r2, #0]
 8003474:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3301      	adds	r3, #1
 800347a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1d0      	bne.n	8003436 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2200      	movs	r2, #0
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f810 	bl	80034c4 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e006      	b.n	80034bc <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e000      	b.n	80034bc <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80034ba:	2302      	movs	r3, #2
  }
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d4:	e02c      	b.n	8003530 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d028      	beq.n	8003530 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034e4:	f7fe fb10 	bl	8001b08 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	1ad2      	subs	r2, r2, r3
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d91d      	bls.n	8003530 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003502:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	6952      	ldr	r2, [r2, #20]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e00f      	b.n	8003550 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	401a      	ands	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	429a      	cmp	r2, r3
 800354c:	d0c3      	beq.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	6912      	ldr	r2, [r2, #16]
 800356a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68d2      	ldr	r2, [r2, #12]
 8003572:	430a      	orrs	r2, r1
 8003574:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003596:	f023 030c 	bic.w	r3, r3, #12
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	430b      	orrs	r3, r1
 800359e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	6952      	ldr	r2, [r2, #20]
 80035aa:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6992      	ldr	r2, [r2, #24]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2c      	ldr	r2, [pc, #176]	; (800366c <UART_SetConfig+0x114>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d103      	bne.n	80035c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035c0:	f7ff f90c 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	e002      	b.n	80035ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035c8:	f7ff f8f4 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 80035cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6819      	ldr	r1, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009a      	lsls	r2, r3, #2
 80035dc:	441a      	add	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	4a21      	ldr	r2, [pc, #132]	; (8003670 <UART_SetConfig+0x118>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	0118      	lsls	r0, r3, #4
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009a      	lsls	r2, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	fbb2 f2f3 	udiv	r2, r2, r3
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <UART_SetConfig+0x118>)
 800360a:	fba3 4302 	umull	r4, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2464      	movs	r4, #100	; 0x64
 8003612:	fb04 f303 	mul.w	r3, r4, r3
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	3332      	adds	r3, #50	; 0x32
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <UART_SetConfig+0x118>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003628:	4418      	add	r0, r3
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <UART_SetConfig+0x118>)
 8003642:	fba3 4302 	umull	r4, r3, r3, r2
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2464      	movs	r4, #100	; 0x64
 800364a:	fb04 f303 	mul.w	r3, r4, r3
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	3332      	adds	r3, #50	; 0x32
 8003654:	4a06      	ldr	r2, [pc, #24]	; (8003670 <UART_SetConfig+0x118>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	4403      	add	r3, r0
 8003662:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	bd90      	pop	{r4, r7, pc}
 800366c:	40013800 	.word	0x40013800
 8003670:	51eb851f 	.word	0x51eb851f

08003674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003674:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003676:	e003      	b.n	8003680 <LoopCopyDataInit>

08003678 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800367a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800367c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800367e:	3104      	adds	r1, #4

08003680 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003680:	480a      	ldr	r0, [pc, #40]	; (80036ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003684:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003686:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003688:	d3f6      	bcc.n	8003678 <CopyDataInit>
  ldr r2, =_sbss
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800368c:	e002      	b.n	8003694 <LoopFillZerobss>

0800368e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800368e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003690:	f842 3b04 	str.w	r3, [r2], #4

08003694 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003696:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003698:	d3f9      	bcc.n	800368e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800369a:	f7fe f9d7 	bl	8001a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800369e:	f000 f815 	bl	80036cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036a2:	f7fd ff73 	bl	800158c <main>
  bx lr
 80036a6:	4770      	bx	lr
  ldr r3, =_sidata
 80036a8:	0800455c 	.word	0x0800455c
  ldr r0, =_sdata
 80036ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80036b0:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 80036b4:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 80036b8:	20000208 	.word	0x20000208

080036bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036bc:	e7fe      	b.n	80036bc <ADC1_2_IRQHandler>
	...

080036c0 <__errno>:
 80036c0:	4b01      	ldr	r3, [pc, #4]	; (80036c8 <__errno+0x8>)
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000034 	.word	0x20000034

080036cc <__libc_init_array>:
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	2500      	movs	r5, #0
 80036d0:	4e0c      	ldr	r6, [pc, #48]	; (8003704 <__libc_init_array+0x38>)
 80036d2:	4c0d      	ldr	r4, [pc, #52]	; (8003708 <__libc_init_array+0x3c>)
 80036d4:	1ba4      	subs	r4, r4, r6
 80036d6:	10a4      	asrs	r4, r4, #2
 80036d8:	42a5      	cmp	r5, r4
 80036da:	d109      	bne.n	80036f0 <__libc_init_array+0x24>
 80036dc:	f000 fc4e 	bl	8003f7c <_init>
 80036e0:	2500      	movs	r5, #0
 80036e2:	4e0a      	ldr	r6, [pc, #40]	; (800370c <__libc_init_array+0x40>)
 80036e4:	4c0a      	ldr	r4, [pc, #40]	; (8003710 <__libc_init_array+0x44>)
 80036e6:	1ba4      	subs	r4, r4, r6
 80036e8:	10a4      	asrs	r4, r4, #2
 80036ea:	42a5      	cmp	r5, r4
 80036ec:	d105      	bne.n	80036fa <__libc_init_array+0x2e>
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036f4:	4798      	blx	r3
 80036f6:	3501      	adds	r5, #1
 80036f8:	e7ee      	b.n	80036d8 <__libc_init_array+0xc>
 80036fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036fe:	4798      	blx	r3
 8003700:	3501      	adds	r5, #1
 8003702:	e7f2      	b.n	80036ea <__libc_init_array+0x1e>
 8003704:	08004554 	.word	0x08004554
 8003708:	08004554 	.word	0x08004554
 800370c:	08004554 	.word	0x08004554
 8003710:	08004558 	.word	0x08004558

08003714 <memcpy>:
 8003714:	b510      	push	{r4, lr}
 8003716:	1e43      	subs	r3, r0, #1
 8003718:	440a      	add	r2, r1
 800371a:	4291      	cmp	r1, r2
 800371c:	d100      	bne.n	8003720 <memcpy+0xc>
 800371e:	bd10      	pop	{r4, pc}
 8003720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003728:	e7f7      	b.n	800371a <memcpy+0x6>

0800372a <memset>:
 800372a:	4603      	mov	r3, r0
 800372c:	4402      	add	r2, r0
 800372e:	4293      	cmp	r3, r2
 8003730:	d100      	bne.n	8003734 <memset+0xa>
 8003732:	4770      	bx	lr
 8003734:	f803 1b01 	strb.w	r1, [r3], #1
 8003738:	e7f9      	b.n	800372e <memset+0x4>
	...

0800373c <siprintf>:
 800373c:	b40e      	push	{r1, r2, r3}
 800373e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003742:	b500      	push	{lr}
 8003744:	b09c      	sub	sp, #112	; 0x70
 8003746:	f8ad 1014 	strh.w	r1, [sp, #20]
 800374a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800374e:	9104      	str	r1, [sp, #16]
 8003750:	9107      	str	r1, [sp, #28]
 8003752:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003756:	ab1d      	add	r3, sp, #116	; 0x74
 8003758:	9002      	str	r0, [sp, #8]
 800375a:	9006      	str	r0, [sp, #24]
 800375c:	4808      	ldr	r0, [pc, #32]	; (8003780 <siprintf+0x44>)
 800375e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003762:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003766:	6800      	ldr	r0, [r0, #0]
 8003768:	a902      	add	r1, sp, #8
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	f000 f866 	bl	800383c <_svfiprintf_r>
 8003770:	2200      	movs	r2, #0
 8003772:	9b02      	ldr	r3, [sp, #8]
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	b01c      	add	sp, #112	; 0x70
 8003778:	f85d eb04 	ldr.w	lr, [sp], #4
 800377c:	b003      	add	sp, #12
 800377e:	4770      	bx	lr
 8003780:	20000034 	.word	0x20000034

08003784 <__ssputs_r>:
 8003784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	688e      	ldr	r6, [r1, #8]
 800378a:	4682      	mov	sl, r0
 800378c:	429e      	cmp	r6, r3
 800378e:	460c      	mov	r4, r1
 8003790:	4691      	mov	r9, r2
 8003792:	4698      	mov	r8, r3
 8003794:	d835      	bhi.n	8003802 <__ssputs_r+0x7e>
 8003796:	898a      	ldrh	r2, [r1, #12]
 8003798:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800379c:	d031      	beq.n	8003802 <__ssputs_r+0x7e>
 800379e:	2302      	movs	r3, #2
 80037a0:	6825      	ldr	r5, [r4, #0]
 80037a2:	6909      	ldr	r1, [r1, #16]
 80037a4:	1a6f      	subs	r7, r5, r1
 80037a6:	6965      	ldr	r5, [r4, #20]
 80037a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80037b0:	f108 0301 	add.w	r3, r8, #1
 80037b4:	443b      	add	r3, r7
 80037b6:	429d      	cmp	r5, r3
 80037b8:	bf38      	it	cc
 80037ba:	461d      	movcc	r5, r3
 80037bc:	0553      	lsls	r3, r2, #21
 80037be:	d531      	bpl.n	8003824 <__ssputs_r+0xa0>
 80037c0:	4629      	mov	r1, r5
 80037c2:	f000 fb3b 	bl	8003e3c <_malloc_r>
 80037c6:	4606      	mov	r6, r0
 80037c8:	b950      	cbnz	r0, 80037e0 <__ssputs_r+0x5c>
 80037ca:	230c      	movs	r3, #12
 80037cc:	f8ca 3000 	str.w	r3, [sl]
 80037d0:	89a3      	ldrh	r3, [r4, #12]
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295
 80037d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037da:	81a3      	strh	r3, [r4, #12]
 80037dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e0:	463a      	mov	r2, r7
 80037e2:	6921      	ldr	r1, [r4, #16]
 80037e4:	f7ff ff96 	bl	8003714 <memcpy>
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	6126      	str	r6, [r4, #16]
 80037f6:	443e      	add	r6, r7
 80037f8:	6026      	str	r6, [r4, #0]
 80037fa:	4646      	mov	r6, r8
 80037fc:	6165      	str	r5, [r4, #20]
 80037fe:	1bed      	subs	r5, r5, r7
 8003800:	60a5      	str	r5, [r4, #8]
 8003802:	4546      	cmp	r6, r8
 8003804:	bf28      	it	cs
 8003806:	4646      	movcs	r6, r8
 8003808:	4649      	mov	r1, r9
 800380a:	4632      	mov	r2, r6
 800380c:	6820      	ldr	r0, [r4, #0]
 800380e:	f000 faaf 	bl	8003d70 <memmove>
 8003812:	68a3      	ldr	r3, [r4, #8]
 8003814:	2000      	movs	r0, #0
 8003816:	1b9b      	subs	r3, r3, r6
 8003818:	60a3      	str	r3, [r4, #8]
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	441e      	add	r6, r3
 800381e:	6026      	str	r6, [r4, #0]
 8003820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003824:	462a      	mov	r2, r5
 8003826:	f000 fb67 	bl	8003ef8 <_realloc_r>
 800382a:	4606      	mov	r6, r0
 800382c:	2800      	cmp	r0, #0
 800382e:	d1e1      	bne.n	80037f4 <__ssputs_r+0x70>
 8003830:	6921      	ldr	r1, [r4, #16]
 8003832:	4650      	mov	r0, sl
 8003834:	f000 fab6 	bl	8003da4 <_free_r>
 8003838:	e7c7      	b.n	80037ca <__ssputs_r+0x46>
	...

0800383c <_svfiprintf_r>:
 800383c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003840:	b09d      	sub	sp, #116	; 0x74
 8003842:	9303      	str	r3, [sp, #12]
 8003844:	898b      	ldrh	r3, [r1, #12]
 8003846:	4680      	mov	r8, r0
 8003848:	061c      	lsls	r4, r3, #24
 800384a:	460d      	mov	r5, r1
 800384c:	4616      	mov	r6, r2
 800384e:	d50f      	bpl.n	8003870 <_svfiprintf_r+0x34>
 8003850:	690b      	ldr	r3, [r1, #16]
 8003852:	b96b      	cbnz	r3, 8003870 <_svfiprintf_r+0x34>
 8003854:	2140      	movs	r1, #64	; 0x40
 8003856:	f000 faf1 	bl	8003e3c <_malloc_r>
 800385a:	6028      	str	r0, [r5, #0]
 800385c:	6128      	str	r0, [r5, #16]
 800385e:	b928      	cbnz	r0, 800386c <_svfiprintf_r+0x30>
 8003860:	230c      	movs	r3, #12
 8003862:	f8c8 3000 	str.w	r3, [r8]
 8003866:	f04f 30ff 	mov.w	r0, #4294967295
 800386a:	e0c4      	b.n	80039f6 <_svfiprintf_r+0x1ba>
 800386c:	2340      	movs	r3, #64	; 0x40
 800386e:	616b      	str	r3, [r5, #20]
 8003870:	2300      	movs	r3, #0
 8003872:	9309      	str	r3, [sp, #36]	; 0x24
 8003874:	2320      	movs	r3, #32
 8003876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800387a:	2330      	movs	r3, #48	; 0x30
 800387c:	f04f 0b01 	mov.w	fp, #1
 8003880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003884:	4637      	mov	r7, r6
 8003886:	463c      	mov	r4, r7
 8003888:	f814 3b01 	ldrb.w	r3, [r4], #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d13c      	bne.n	800390a <_svfiprintf_r+0xce>
 8003890:	ebb7 0a06 	subs.w	sl, r7, r6
 8003894:	d00b      	beq.n	80038ae <_svfiprintf_r+0x72>
 8003896:	4653      	mov	r3, sl
 8003898:	4632      	mov	r2, r6
 800389a:	4629      	mov	r1, r5
 800389c:	4640      	mov	r0, r8
 800389e:	f7ff ff71 	bl	8003784 <__ssputs_r>
 80038a2:	3001      	adds	r0, #1
 80038a4:	f000 80a2 	beq.w	80039ec <_svfiprintf_r+0x1b0>
 80038a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038aa:	4453      	add	r3, sl
 80038ac:	9309      	str	r3, [sp, #36]	; 0x24
 80038ae:	783b      	ldrb	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 809b 	beq.w	80039ec <_svfiprintf_r+0x1b0>
 80038b6:	2300      	movs	r3, #0
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	9304      	str	r3, [sp, #16]
 80038be:	9307      	str	r3, [sp, #28]
 80038c0:	9205      	str	r2, [sp, #20]
 80038c2:	9306      	str	r3, [sp, #24]
 80038c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038c8:	931a      	str	r3, [sp, #104]	; 0x68
 80038ca:	2205      	movs	r2, #5
 80038cc:	7821      	ldrb	r1, [r4, #0]
 80038ce:	4850      	ldr	r0, [pc, #320]	; (8003a10 <_svfiprintf_r+0x1d4>)
 80038d0:	f000 fa40 	bl	8003d54 <memchr>
 80038d4:	1c67      	adds	r7, r4, #1
 80038d6:	9b04      	ldr	r3, [sp, #16]
 80038d8:	b9d8      	cbnz	r0, 8003912 <_svfiprintf_r+0xd6>
 80038da:	06d9      	lsls	r1, r3, #27
 80038dc:	bf44      	itt	mi
 80038de:	2220      	movmi	r2, #32
 80038e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80038e4:	071a      	lsls	r2, r3, #28
 80038e6:	bf44      	itt	mi
 80038e8:	222b      	movmi	r2, #43	; 0x2b
 80038ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80038ee:	7822      	ldrb	r2, [r4, #0]
 80038f0:	2a2a      	cmp	r2, #42	; 0x2a
 80038f2:	d016      	beq.n	8003922 <_svfiprintf_r+0xe6>
 80038f4:	2100      	movs	r1, #0
 80038f6:	200a      	movs	r0, #10
 80038f8:	9a07      	ldr	r2, [sp, #28]
 80038fa:	4627      	mov	r7, r4
 80038fc:	783b      	ldrb	r3, [r7, #0]
 80038fe:	3401      	adds	r4, #1
 8003900:	3b30      	subs	r3, #48	; 0x30
 8003902:	2b09      	cmp	r3, #9
 8003904:	d950      	bls.n	80039a8 <_svfiprintf_r+0x16c>
 8003906:	b1c9      	cbz	r1, 800393c <_svfiprintf_r+0x100>
 8003908:	e011      	b.n	800392e <_svfiprintf_r+0xf2>
 800390a:	2b25      	cmp	r3, #37	; 0x25
 800390c:	d0c0      	beq.n	8003890 <_svfiprintf_r+0x54>
 800390e:	4627      	mov	r7, r4
 8003910:	e7b9      	b.n	8003886 <_svfiprintf_r+0x4a>
 8003912:	4a3f      	ldr	r2, [pc, #252]	; (8003a10 <_svfiprintf_r+0x1d4>)
 8003914:	463c      	mov	r4, r7
 8003916:	1a80      	subs	r0, r0, r2
 8003918:	fa0b f000 	lsl.w	r0, fp, r0
 800391c:	4318      	orrs	r0, r3
 800391e:	9004      	str	r0, [sp, #16]
 8003920:	e7d3      	b.n	80038ca <_svfiprintf_r+0x8e>
 8003922:	9a03      	ldr	r2, [sp, #12]
 8003924:	1d11      	adds	r1, r2, #4
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	9103      	str	r1, [sp, #12]
 800392a:	2a00      	cmp	r2, #0
 800392c:	db01      	blt.n	8003932 <_svfiprintf_r+0xf6>
 800392e:	9207      	str	r2, [sp, #28]
 8003930:	e004      	b.n	800393c <_svfiprintf_r+0x100>
 8003932:	4252      	negs	r2, r2
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	9207      	str	r2, [sp, #28]
 800393a:	9304      	str	r3, [sp, #16]
 800393c:	783b      	ldrb	r3, [r7, #0]
 800393e:	2b2e      	cmp	r3, #46	; 0x2e
 8003940:	d10d      	bne.n	800395e <_svfiprintf_r+0x122>
 8003942:	787b      	ldrb	r3, [r7, #1]
 8003944:	1c79      	adds	r1, r7, #1
 8003946:	2b2a      	cmp	r3, #42	; 0x2a
 8003948:	d132      	bne.n	80039b0 <_svfiprintf_r+0x174>
 800394a:	9b03      	ldr	r3, [sp, #12]
 800394c:	3702      	adds	r7, #2
 800394e:	1d1a      	adds	r2, r3, #4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	9203      	str	r2, [sp, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	bfb8      	it	lt
 8003958:	f04f 33ff 	movlt.w	r3, #4294967295
 800395c:	9305      	str	r3, [sp, #20]
 800395e:	4c2d      	ldr	r4, [pc, #180]	; (8003a14 <_svfiprintf_r+0x1d8>)
 8003960:	2203      	movs	r2, #3
 8003962:	7839      	ldrb	r1, [r7, #0]
 8003964:	4620      	mov	r0, r4
 8003966:	f000 f9f5 	bl	8003d54 <memchr>
 800396a:	b138      	cbz	r0, 800397c <_svfiprintf_r+0x140>
 800396c:	2340      	movs	r3, #64	; 0x40
 800396e:	1b00      	subs	r0, r0, r4
 8003970:	fa03 f000 	lsl.w	r0, r3, r0
 8003974:	9b04      	ldr	r3, [sp, #16]
 8003976:	3701      	adds	r7, #1
 8003978:	4303      	orrs	r3, r0
 800397a:	9304      	str	r3, [sp, #16]
 800397c:	7839      	ldrb	r1, [r7, #0]
 800397e:	2206      	movs	r2, #6
 8003980:	4825      	ldr	r0, [pc, #148]	; (8003a18 <_svfiprintf_r+0x1dc>)
 8003982:	1c7e      	adds	r6, r7, #1
 8003984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003988:	f000 f9e4 	bl	8003d54 <memchr>
 800398c:	2800      	cmp	r0, #0
 800398e:	d035      	beq.n	80039fc <_svfiprintf_r+0x1c0>
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <_svfiprintf_r+0x1e0>)
 8003992:	b9fb      	cbnz	r3, 80039d4 <_svfiprintf_r+0x198>
 8003994:	9b03      	ldr	r3, [sp, #12]
 8003996:	3307      	adds	r3, #7
 8003998:	f023 0307 	bic.w	r3, r3, #7
 800399c:	3308      	adds	r3, #8
 800399e:	9303      	str	r3, [sp, #12]
 80039a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039a2:	444b      	add	r3, r9
 80039a4:	9309      	str	r3, [sp, #36]	; 0x24
 80039a6:	e76d      	b.n	8003884 <_svfiprintf_r+0x48>
 80039a8:	fb00 3202 	mla	r2, r0, r2, r3
 80039ac:	2101      	movs	r1, #1
 80039ae:	e7a4      	b.n	80038fa <_svfiprintf_r+0xbe>
 80039b0:	2300      	movs	r3, #0
 80039b2:	240a      	movs	r4, #10
 80039b4:	4618      	mov	r0, r3
 80039b6:	9305      	str	r3, [sp, #20]
 80039b8:	460f      	mov	r7, r1
 80039ba:	783a      	ldrb	r2, [r7, #0]
 80039bc:	3101      	adds	r1, #1
 80039be:	3a30      	subs	r2, #48	; 0x30
 80039c0:	2a09      	cmp	r2, #9
 80039c2:	d903      	bls.n	80039cc <_svfiprintf_r+0x190>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ca      	beq.n	800395e <_svfiprintf_r+0x122>
 80039c8:	9005      	str	r0, [sp, #20]
 80039ca:	e7c8      	b.n	800395e <_svfiprintf_r+0x122>
 80039cc:	fb04 2000 	mla	r0, r4, r0, r2
 80039d0:	2301      	movs	r3, #1
 80039d2:	e7f1      	b.n	80039b8 <_svfiprintf_r+0x17c>
 80039d4:	ab03      	add	r3, sp, #12
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	462a      	mov	r2, r5
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <_svfiprintf_r+0x1e4>)
 80039dc:	a904      	add	r1, sp, #16
 80039de:	4640      	mov	r0, r8
 80039e0:	f3af 8000 	nop.w
 80039e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80039e8:	4681      	mov	r9, r0
 80039ea:	d1d9      	bne.n	80039a0 <_svfiprintf_r+0x164>
 80039ec:	89ab      	ldrh	r3, [r5, #12]
 80039ee:	065b      	lsls	r3, r3, #25
 80039f0:	f53f af39 	bmi.w	8003866 <_svfiprintf_r+0x2a>
 80039f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039f6:	b01d      	add	sp, #116	; 0x74
 80039f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039fc:	ab03      	add	r3, sp, #12
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	462a      	mov	r2, r5
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <_svfiprintf_r+0x1e4>)
 8003a04:	a904      	add	r1, sp, #16
 8003a06:	4640      	mov	r0, r8
 8003a08:	f000 f884 	bl	8003b14 <_printf_i>
 8003a0c:	e7ea      	b.n	80039e4 <_svfiprintf_r+0x1a8>
 8003a0e:	bf00      	nop
 8003a10:	08004520 	.word	0x08004520
 8003a14:	08004526 	.word	0x08004526
 8003a18:	0800452a 	.word	0x0800452a
 8003a1c:	00000000 	.word	0x00000000
 8003a20:	08003785 	.word	0x08003785

08003a24 <_printf_common>:
 8003a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a28:	4691      	mov	r9, r2
 8003a2a:	461f      	mov	r7, r3
 8003a2c:	688a      	ldr	r2, [r1, #8]
 8003a2e:	690b      	ldr	r3, [r1, #16]
 8003a30:	4606      	mov	r6, r0
 8003a32:	4293      	cmp	r3, r2
 8003a34:	bfb8      	it	lt
 8003a36:	4613      	movlt	r3, r2
 8003a38:	f8c9 3000 	str.w	r3, [r9]
 8003a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a40:	460c      	mov	r4, r1
 8003a42:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a46:	b112      	cbz	r2, 8003a4e <_printf_common+0x2a>
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f8c9 3000 	str.w	r3, [r9]
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	0699      	lsls	r1, r3, #26
 8003a52:	bf42      	ittt	mi
 8003a54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003a58:	3302      	addmi	r3, #2
 8003a5a:	f8c9 3000 	strmi.w	r3, [r9]
 8003a5e:	6825      	ldr	r5, [r4, #0]
 8003a60:	f015 0506 	ands.w	r5, r5, #6
 8003a64:	d107      	bne.n	8003a76 <_printf_common+0x52>
 8003a66:	f104 0a19 	add.w	sl, r4, #25
 8003a6a:	68e3      	ldr	r3, [r4, #12]
 8003a6c:	f8d9 2000 	ldr.w	r2, [r9]
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	429d      	cmp	r5, r3
 8003a74:	db2a      	blt.n	8003acc <_printf_common+0xa8>
 8003a76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a7a:	6822      	ldr	r2, [r4, #0]
 8003a7c:	3300      	adds	r3, #0
 8003a7e:	bf18      	it	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	0692      	lsls	r2, r2, #26
 8003a84:	d42f      	bmi.n	8003ae6 <_printf_common+0xc2>
 8003a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a8a:	4639      	mov	r1, r7
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	47c0      	blx	r8
 8003a90:	3001      	adds	r0, #1
 8003a92:	d022      	beq.n	8003ada <_printf_common+0xb6>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	68e5      	ldr	r5, [r4, #12]
 8003a98:	f003 0306 	and.w	r3, r3, #6
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	bf18      	it	ne
 8003aa0:	2500      	movne	r5, #0
 8003aa2:	f8d9 2000 	ldr.w	r2, [r9]
 8003aa6:	f04f 0900 	mov.w	r9, #0
 8003aaa:	bf08      	it	eq
 8003aac:	1aad      	subeq	r5, r5, r2
 8003aae:	68a3      	ldr	r3, [r4, #8]
 8003ab0:	6922      	ldr	r2, [r4, #16]
 8003ab2:	bf08      	it	eq
 8003ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bfc4      	itt	gt
 8003abc:	1a9b      	subgt	r3, r3, r2
 8003abe:	18ed      	addgt	r5, r5, r3
 8003ac0:	341a      	adds	r4, #26
 8003ac2:	454d      	cmp	r5, r9
 8003ac4:	d11b      	bne.n	8003afe <_printf_common+0xda>
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003acc:	2301      	movs	r3, #1
 8003ace:	4652      	mov	r2, sl
 8003ad0:	4639      	mov	r1, r7
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	47c0      	blx	r8
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	d103      	bne.n	8003ae2 <_printf_common+0xbe>
 8003ada:	f04f 30ff 	mov.w	r0, #4294967295
 8003ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae2:	3501      	adds	r5, #1
 8003ae4:	e7c1      	b.n	8003a6a <_printf_common+0x46>
 8003ae6:	2030      	movs	r0, #48	; 0x30
 8003ae8:	18e1      	adds	r1, r4, r3
 8003aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003af4:	4422      	add	r2, r4
 8003af6:	3302      	adds	r3, #2
 8003af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003afc:	e7c3      	b.n	8003a86 <_printf_common+0x62>
 8003afe:	2301      	movs	r3, #1
 8003b00:	4622      	mov	r2, r4
 8003b02:	4639      	mov	r1, r7
 8003b04:	4630      	mov	r0, r6
 8003b06:	47c0      	blx	r8
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d0e6      	beq.n	8003ada <_printf_common+0xb6>
 8003b0c:	f109 0901 	add.w	r9, r9, #1
 8003b10:	e7d7      	b.n	8003ac2 <_printf_common+0x9e>
	...

08003b14 <_printf_i>:
 8003b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b18:	4617      	mov	r7, r2
 8003b1a:	7e0a      	ldrb	r2, [r1, #24]
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	2a6e      	cmp	r2, #110	; 0x6e
 8003b20:	4698      	mov	r8, r3
 8003b22:	4606      	mov	r6, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b28:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003b2c:	f000 80bc 	beq.w	8003ca8 <_printf_i+0x194>
 8003b30:	d81a      	bhi.n	8003b68 <_printf_i+0x54>
 8003b32:	2a63      	cmp	r2, #99	; 0x63
 8003b34:	d02e      	beq.n	8003b94 <_printf_i+0x80>
 8003b36:	d80a      	bhi.n	8003b4e <_printf_i+0x3a>
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	f000 80c8 	beq.w	8003cce <_printf_i+0x1ba>
 8003b3e:	2a58      	cmp	r2, #88	; 0x58
 8003b40:	f000 808a 	beq.w	8003c58 <_printf_i+0x144>
 8003b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b48:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003b4c:	e02a      	b.n	8003ba4 <_printf_i+0x90>
 8003b4e:	2a64      	cmp	r2, #100	; 0x64
 8003b50:	d001      	beq.n	8003b56 <_printf_i+0x42>
 8003b52:	2a69      	cmp	r2, #105	; 0x69
 8003b54:	d1f6      	bne.n	8003b44 <_printf_i+0x30>
 8003b56:	6821      	ldr	r1, [r4, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003b5e:	d023      	beq.n	8003ba8 <_printf_i+0x94>
 8003b60:	1d11      	adds	r1, r2, #4
 8003b62:	6019      	str	r1, [r3, #0]
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	e027      	b.n	8003bb8 <_printf_i+0xa4>
 8003b68:	2a73      	cmp	r2, #115	; 0x73
 8003b6a:	f000 80b4 	beq.w	8003cd6 <_printf_i+0x1c2>
 8003b6e:	d808      	bhi.n	8003b82 <_printf_i+0x6e>
 8003b70:	2a6f      	cmp	r2, #111	; 0x6f
 8003b72:	d02a      	beq.n	8003bca <_printf_i+0xb6>
 8003b74:	2a70      	cmp	r2, #112	; 0x70
 8003b76:	d1e5      	bne.n	8003b44 <_printf_i+0x30>
 8003b78:	680a      	ldr	r2, [r1, #0]
 8003b7a:	f042 0220 	orr.w	r2, r2, #32
 8003b7e:	600a      	str	r2, [r1, #0]
 8003b80:	e003      	b.n	8003b8a <_printf_i+0x76>
 8003b82:	2a75      	cmp	r2, #117	; 0x75
 8003b84:	d021      	beq.n	8003bca <_printf_i+0xb6>
 8003b86:	2a78      	cmp	r2, #120	; 0x78
 8003b88:	d1dc      	bne.n	8003b44 <_printf_i+0x30>
 8003b8a:	2278      	movs	r2, #120	; 0x78
 8003b8c:	496f      	ldr	r1, [pc, #444]	; (8003d4c <_printf_i+0x238>)
 8003b8e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003b92:	e064      	b.n	8003c5e <_printf_i+0x14a>
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003b9a:	1d11      	adds	r1, r2, #4
 8003b9c:	6019      	str	r1, [r3, #0]
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0a3      	b.n	8003cf0 <_printf_i+0x1dc>
 8003ba8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003bac:	f102 0104 	add.w	r1, r2, #4
 8003bb0:	6019      	str	r1, [r3, #0]
 8003bb2:	d0d7      	beq.n	8003b64 <_printf_i+0x50>
 8003bb4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	da03      	bge.n	8003bc4 <_printf_i+0xb0>
 8003bbc:	222d      	movs	r2, #45	; 0x2d
 8003bbe:	425b      	negs	r3, r3
 8003bc0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003bc4:	4962      	ldr	r1, [pc, #392]	; (8003d50 <_printf_i+0x23c>)
 8003bc6:	220a      	movs	r2, #10
 8003bc8:	e017      	b.n	8003bfa <_printf_i+0xe6>
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003bd2:	d003      	beq.n	8003bdc <_printf_i+0xc8>
 8003bd4:	1d08      	adds	r0, r1, #4
 8003bd6:	6018      	str	r0, [r3, #0]
 8003bd8:	680b      	ldr	r3, [r1, #0]
 8003bda:	e006      	b.n	8003bea <_printf_i+0xd6>
 8003bdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003be0:	f101 0004 	add.w	r0, r1, #4
 8003be4:	6018      	str	r0, [r3, #0]
 8003be6:	d0f7      	beq.n	8003bd8 <_printf_i+0xc4>
 8003be8:	880b      	ldrh	r3, [r1, #0]
 8003bea:	2a6f      	cmp	r2, #111	; 0x6f
 8003bec:	bf14      	ite	ne
 8003bee:	220a      	movne	r2, #10
 8003bf0:	2208      	moveq	r2, #8
 8003bf2:	4957      	ldr	r1, [pc, #348]	; (8003d50 <_printf_i+0x23c>)
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003bfa:	6865      	ldr	r5, [r4, #4]
 8003bfc:	2d00      	cmp	r5, #0
 8003bfe:	60a5      	str	r5, [r4, #8]
 8003c00:	f2c0 809c 	blt.w	8003d3c <_printf_i+0x228>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	f020 0004 	bic.w	r0, r0, #4
 8003c0a:	6020      	str	r0, [r4, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d13f      	bne.n	8003c90 <_printf_i+0x17c>
 8003c10:	2d00      	cmp	r5, #0
 8003c12:	f040 8095 	bne.w	8003d40 <_printf_i+0x22c>
 8003c16:	4675      	mov	r5, lr
 8003c18:	2a08      	cmp	r2, #8
 8003c1a:	d10b      	bne.n	8003c34 <_printf_i+0x120>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	07da      	lsls	r2, r3, #31
 8003c20:	d508      	bpl.n	8003c34 <_printf_i+0x120>
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	6862      	ldr	r2, [r4, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bfde      	ittt	le
 8003c2a:	2330      	movle	r3, #48	; 0x30
 8003c2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c34:	ebae 0305 	sub.w	r3, lr, r5
 8003c38:	6123      	str	r3, [r4, #16]
 8003c3a:	f8cd 8000 	str.w	r8, [sp]
 8003c3e:	463b      	mov	r3, r7
 8003c40:	aa03      	add	r2, sp, #12
 8003c42:	4621      	mov	r1, r4
 8003c44:	4630      	mov	r0, r6
 8003c46:	f7ff feed 	bl	8003a24 <_printf_common>
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d155      	bne.n	8003cfa <_printf_i+0x1e6>
 8003c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c52:	b005      	add	sp, #20
 8003c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c58:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003c5c:	493c      	ldr	r1, [pc, #240]	; (8003d50 <_printf_i+0x23c>)
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c66:	f100 0504 	add.w	r5, r0, #4
 8003c6a:	601d      	str	r5, [r3, #0]
 8003c6c:	d001      	beq.n	8003c72 <_printf_i+0x15e>
 8003c6e:	6803      	ldr	r3, [r0, #0]
 8003c70:	e002      	b.n	8003c78 <_printf_i+0x164>
 8003c72:	0655      	lsls	r5, r2, #25
 8003c74:	d5fb      	bpl.n	8003c6e <_printf_i+0x15a>
 8003c76:	8803      	ldrh	r3, [r0, #0]
 8003c78:	07d0      	lsls	r0, r2, #31
 8003c7a:	bf44      	itt	mi
 8003c7c:	f042 0220 	orrmi.w	r2, r2, #32
 8003c80:	6022      	strmi	r2, [r4, #0]
 8003c82:	b91b      	cbnz	r3, 8003c8c <_printf_i+0x178>
 8003c84:	6822      	ldr	r2, [r4, #0]
 8003c86:	f022 0220 	bic.w	r2, r2, #32
 8003c8a:	6022      	str	r2, [r4, #0]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	e7b1      	b.n	8003bf4 <_printf_i+0xe0>
 8003c90:	4675      	mov	r5, lr
 8003c92:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c96:	fb02 3310 	mls	r3, r2, r0, r3
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d1f5      	bne.n	8003c92 <_printf_i+0x17e>
 8003ca6:	e7b7      	b.n	8003c18 <_printf_i+0x104>
 8003ca8:	6808      	ldr	r0, [r1, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003cb0:	6949      	ldr	r1, [r1, #20]
 8003cb2:	d004      	beq.n	8003cbe <_printf_i+0x1aa>
 8003cb4:	1d10      	adds	r0, r2, #4
 8003cb6:	6018      	str	r0, [r3, #0]
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	6019      	str	r1, [r3, #0]
 8003cbc:	e007      	b.n	8003cce <_printf_i+0x1ba>
 8003cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cc2:	f102 0004 	add.w	r0, r2, #4
 8003cc6:	6018      	str	r0, [r3, #0]
 8003cc8:	6813      	ldr	r3, [r2, #0]
 8003cca:	d0f6      	beq.n	8003cba <_printf_i+0x1a6>
 8003ccc:	8019      	strh	r1, [r3, #0]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	4675      	mov	r5, lr
 8003cd2:	6123      	str	r3, [r4, #16]
 8003cd4:	e7b1      	b.n	8003c3a <_printf_i+0x126>
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	1d11      	adds	r1, r2, #4
 8003cda:	6019      	str	r1, [r3, #0]
 8003cdc:	6815      	ldr	r5, [r2, #0]
 8003cde:	2100      	movs	r1, #0
 8003ce0:	6862      	ldr	r2, [r4, #4]
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f000 f836 	bl	8003d54 <memchr>
 8003ce8:	b108      	cbz	r0, 8003cee <_printf_i+0x1da>
 8003cea:	1b40      	subs	r0, r0, r5
 8003cec:	6060      	str	r0, [r4, #4]
 8003cee:	6863      	ldr	r3, [r4, #4]
 8003cf0:	6123      	str	r3, [r4, #16]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cf8:	e79f      	b.n	8003c3a <_printf_i+0x126>
 8003cfa:	6923      	ldr	r3, [r4, #16]
 8003cfc:	462a      	mov	r2, r5
 8003cfe:	4639      	mov	r1, r7
 8003d00:	4630      	mov	r0, r6
 8003d02:	47c0      	blx	r8
 8003d04:	3001      	adds	r0, #1
 8003d06:	d0a2      	beq.n	8003c4e <_printf_i+0x13a>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	079b      	lsls	r3, r3, #30
 8003d0c:	d507      	bpl.n	8003d1e <_printf_i+0x20a>
 8003d0e:	2500      	movs	r5, #0
 8003d10:	f104 0919 	add.w	r9, r4, #25
 8003d14:	68e3      	ldr	r3, [r4, #12]
 8003d16:	9a03      	ldr	r2, [sp, #12]
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	429d      	cmp	r5, r3
 8003d1c:	db05      	blt.n	8003d2a <_printf_i+0x216>
 8003d1e:	68e0      	ldr	r0, [r4, #12]
 8003d20:	9b03      	ldr	r3, [sp, #12]
 8003d22:	4298      	cmp	r0, r3
 8003d24:	bfb8      	it	lt
 8003d26:	4618      	movlt	r0, r3
 8003d28:	e793      	b.n	8003c52 <_printf_i+0x13e>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	464a      	mov	r2, r9
 8003d2e:	4639      	mov	r1, r7
 8003d30:	4630      	mov	r0, r6
 8003d32:	47c0      	blx	r8
 8003d34:	3001      	adds	r0, #1
 8003d36:	d08a      	beq.n	8003c4e <_printf_i+0x13a>
 8003d38:	3501      	adds	r5, #1
 8003d3a:	e7eb      	b.n	8003d14 <_printf_i+0x200>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1a7      	bne.n	8003c90 <_printf_i+0x17c>
 8003d40:	780b      	ldrb	r3, [r1, #0]
 8003d42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d4a:	e765      	b.n	8003c18 <_printf_i+0x104>
 8003d4c:	08004542 	.word	0x08004542
 8003d50:	08004531 	.word	0x08004531

08003d54 <memchr>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	b2c9      	uxtb	r1, r1
 8003d58:	4402      	add	r2, r0
 8003d5a:	4290      	cmp	r0, r2
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	d101      	bne.n	8003d64 <memchr+0x10>
 8003d60:	2000      	movs	r0, #0
 8003d62:	bd10      	pop	{r4, pc}
 8003d64:	781c      	ldrb	r4, [r3, #0]
 8003d66:	3001      	adds	r0, #1
 8003d68:	428c      	cmp	r4, r1
 8003d6a:	d1f6      	bne.n	8003d5a <memchr+0x6>
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd10      	pop	{r4, pc}

08003d70 <memmove>:
 8003d70:	4288      	cmp	r0, r1
 8003d72:	b510      	push	{r4, lr}
 8003d74:	eb01 0302 	add.w	r3, r1, r2
 8003d78:	d803      	bhi.n	8003d82 <memmove+0x12>
 8003d7a:	1e42      	subs	r2, r0, #1
 8003d7c:	4299      	cmp	r1, r3
 8003d7e:	d10c      	bne.n	8003d9a <memmove+0x2a>
 8003d80:	bd10      	pop	{r4, pc}
 8003d82:	4298      	cmp	r0, r3
 8003d84:	d2f9      	bcs.n	8003d7a <memmove+0xa>
 8003d86:	1881      	adds	r1, r0, r2
 8003d88:	1ad2      	subs	r2, r2, r3
 8003d8a:	42d3      	cmn	r3, r2
 8003d8c:	d100      	bne.n	8003d90 <memmove+0x20>
 8003d8e:	bd10      	pop	{r4, pc}
 8003d90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003d98:	e7f7      	b.n	8003d8a <memmove+0x1a>
 8003d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d9e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003da2:	e7eb      	b.n	8003d7c <memmove+0xc>

08003da4 <_free_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4605      	mov	r5, r0
 8003da8:	2900      	cmp	r1, #0
 8003daa:	d043      	beq.n	8003e34 <_free_r+0x90>
 8003dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db0:	1f0c      	subs	r4, r1, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bfb8      	it	lt
 8003db6:	18e4      	addlt	r4, r4, r3
 8003db8:	f000 f8d4 	bl	8003f64 <__malloc_lock>
 8003dbc:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <_free_r+0x94>)
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	b933      	cbnz	r3, 8003dd2 <_free_r+0x2e>
 8003dc4:	6063      	str	r3, [r4, #4]
 8003dc6:	6014      	str	r4, [r2, #0]
 8003dc8:	4628      	mov	r0, r5
 8003dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dce:	f000 b8ca 	b.w	8003f66 <__malloc_unlock>
 8003dd2:	42a3      	cmp	r3, r4
 8003dd4:	d90b      	bls.n	8003dee <_free_r+0x4a>
 8003dd6:	6821      	ldr	r1, [r4, #0]
 8003dd8:	1862      	adds	r2, r4, r1
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	bf01      	itttt	eq
 8003dde:	681a      	ldreq	r2, [r3, #0]
 8003de0:	685b      	ldreq	r3, [r3, #4]
 8003de2:	1852      	addeq	r2, r2, r1
 8003de4:	6022      	streq	r2, [r4, #0]
 8003de6:	6063      	str	r3, [r4, #4]
 8003de8:	6004      	str	r4, [r0, #0]
 8003dea:	e7ed      	b.n	8003dc8 <_free_r+0x24>
 8003dec:	4613      	mov	r3, r2
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	b10a      	cbz	r2, 8003df6 <_free_r+0x52>
 8003df2:	42a2      	cmp	r2, r4
 8003df4:	d9fa      	bls.n	8003dec <_free_r+0x48>
 8003df6:	6819      	ldr	r1, [r3, #0]
 8003df8:	1858      	adds	r0, r3, r1
 8003dfa:	42a0      	cmp	r0, r4
 8003dfc:	d10b      	bne.n	8003e16 <_free_r+0x72>
 8003dfe:	6820      	ldr	r0, [r4, #0]
 8003e00:	4401      	add	r1, r0
 8003e02:	1858      	adds	r0, r3, r1
 8003e04:	4282      	cmp	r2, r0
 8003e06:	6019      	str	r1, [r3, #0]
 8003e08:	d1de      	bne.n	8003dc8 <_free_r+0x24>
 8003e0a:	6810      	ldr	r0, [r2, #0]
 8003e0c:	6852      	ldr	r2, [r2, #4]
 8003e0e:	4401      	add	r1, r0
 8003e10:	6019      	str	r1, [r3, #0]
 8003e12:	605a      	str	r2, [r3, #4]
 8003e14:	e7d8      	b.n	8003dc8 <_free_r+0x24>
 8003e16:	d902      	bls.n	8003e1e <_free_r+0x7a>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	602b      	str	r3, [r5, #0]
 8003e1c:	e7d4      	b.n	8003dc8 <_free_r+0x24>
 8003e1e:	6820      	ldr	r0, [r4, #0]
 8003e20:	1821      	adds	r1, r4, r0
 8003e22:	428a      	cmp	r2, r1
 8003e24:	bf01      	itttt	eq
 8003e26:	6811      	ldreq	r1, [r2, #0]
 8003e28:	6852      	ldreq	r2, [r2, #4]
 8003e2a:	1809      	addeq	r1, r1, r0
 8003e2c:	6021      	streq	r1, [r4, #0]
 8003e2e:	6062      	str	r2, [r4, #4]
 8003e30:	605c      	str	r4, [r3, #4]
 8003e32:	e7c9      	b.n	8003dc8 <_free_r+0x24>
 8003e34:	bd38      	pop	{r3, r4, r5, pc}
 8003e36:	bf00      	nop
 8003e38:	20000160 	.word	0x20000160

08003e3c <_malloc_r>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	1ccd      	adds	r5, r1, #3
 8003e40:	f025 0503 	bic.w	r5, r5, #3
 8003e44:	3508      	adds	r5, #8
 8003e46:	2d0c      	cmp	r5, #12
 8003e48:	bf38      	it	cc
 8003e4a:	250c      	movcc	r5, #12
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	4606      	mov	r6, r0
 8003e50:	db01      	blt.n	8003e56 <_malloc_r+0x1a>
 8003e52:	42a9      	cmp	r1, r5
 8003e54:	d903      	bls.n	8003e5e <_malloc_r+0x22>
 8003e56:	230c      	movs	r3, #12
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	bd70      	pop	{r4, r5, r6, pc}
 8003e5e:	f000 f881 	bl	8003f64 <__malloc_lock>
 8003e62:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <_malloc_r+0xb4>)
 8003e64:	6814      	ldr	r4, [r2, #0]
 8003e66:	4621      	mov	r1, r4
 8003e68:	b991      	cbnz	r1, 8003e90 <_malloc_r+0x54>
 8003e6a:	4c22      	ldr	r4, [pc, #136]	; (8003ef4 <_malloc_r+0xb8>)
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	b91b      	cbnz	r3, 8003e78 <_malloc_r+0x3c>
 8003e70:	4630      	mov	r0, r6
 8003e72:	f000 f867 	bl	8003f44 <_sbrk_r>
 8003e76:	6020      	str	r0, [r4, #0]
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f000 f862 	bl	8003f44 <_sbrk_r>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d126      	bne.n	8003ed2 <_malloc_r+0x96>
 8003e84:	230c      	movs	r3, #12
 8003e86:	4630      	mov	r0, r6
 8003e88:	6033      	str	r3, [r6, #0]
 8003e8a:	f000 f86c 	bl	8003f66 <__malloc_unlock>
 8003e8e:	e7e4      	b.n	8003e5a <_malloc_r+0x1e>
 8003e90:	680b      	ldr	r3, [r1, #0]
 8003e92:	1b5b      	subs	r3, r3, r5
 8003e94:	d41a      	bmi.n	8003ecc <_malloc_r+0x90>
 8003e96:	2b0b      	cmp	r3, #11
 8003e98:	d90f      	bls.n	8003eba <_malloc_r+0x7e>
 8003e9a:	600b      	str	r3, [r1, #0]
 8003e9c:	18cc      	adds	r4, r1, r3
 8003e9e:	50cd      	str	r5, [r1, r3]
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f000 f860 	bl	8003f66 <__malloc_unlock>
 8003ea6:	f104 000b 	add.w	r0, r4, #11
 8003eaa:	1d23      	adds	r3, r4, #4
 8003eac:	f020 0007 	bic.w	r0, r0, #7
 8003eb0:	1ac3      	subs	r3, r0, r3
 8003eb2:	d01b      	beq.n	8003eec <_malloc_r+0xb0>
 8003eb4:	425a      	negs	r2, r3
 8003eb6:	50e2      	str	r2, [r4, r3]
 8003eb8:	bd70      	pop	{r4, r5, r6, pc}
 8003eba:	428c      	cmp	r4, r1
 8003ebc:	bf0b      	itete	eq
 8003ebe:	6863      	ldreq	r3, [r4, #4]
 8003ec0:	684b      	ldrne	r3, [r1, #4]
 8003ec2:	6013      	streq	r3, [r2, #0]
 8003ec4:	6063      	strne	r3, [r4, #4]
 8003ec6:	bf18      	it	ne
 8003ec8:	460c      	movne	r4, r1
 8003eca:	e7e9      	b.n	8003ea0 <_malloc_r+0x64>
 8003ecc:	460c      	mov	r4, r1
 8003ece:	6849      	ldr	r1, [r1, #4]
 8003ed0:	e7ca      	b.n	8003e68 <_malloc_r+0x2c>
 8003ed2:	1cc4      	adds	r4, r0, #3
 8003ed4:	f024 0403 	bic.w	r4, r4, #3
 8003ed8:	42a0      	cmp	r0, r4
 8003eda:	d005      	beq.n	8003ee8 <_malloc_r+0xac>
 8003edc:	1a21      	subs	r1, r4, r0
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f000 f830 	bl	8003f44 <_sbrk_r>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d0cd      	beq.n	8003e84 <_malloc_r+0x48>
 8003ee8:	6025      	str	r5, [r4, #0]
 8003eea:	e7d9      	b.n	8003ea0 <_malloc_r+0x64>
 8003eec:	bd70      	pop	{r4, r5, r6, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000160 	.word	0x20000160
 8003ef4:	20000164 	.word	0x20000164

08003ef8 <_realloc_r>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	4607      	mov	r7, r0
 8003efc:	4614      	mov	r4, r2
 8003efe:	460e      	mov	r6, r1
 8003f00:	b921      	cbnz	r1, 8003f0c <_realloc_r+0x14>
 8003f02:	4611      	mov	r1, r2
 8003f04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f08:	f7ff bf98 	b.w	8003e3c <_malloc_r>
 8003f0c:	b922      	cbnz	r2, 8003f18 <_realloc_r+0x20>
 8003f0e:	f7ff ff49 	bl	8003da4 <_free_r>
 8003f12:	4625      	mov	r5, r4
 8003f14:	4628      	mov	r0, r5
 8003f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f18:	f000 f826 	bl	8003f68 <_malloc_usable_size_r>
 8003f1c:	4284      	cmp	r4, r0
 8003f1e:	d90f      	bls.n	8003f40 <_realloc_r+0x48>
 8003f20:	4621      	mov	r1, r4
 8003f22:	4638      	mov	r0, r7
 8003f24:	f7ff ff8a 	bl	8003e3c <_malloc_r>
 8003f28:	4605      	mov	r5, r0
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d0f2      	beq.n	8003f14 <_realloc_r+0x1c>
 8003f2e:	4631      	mov	r1, r6
 8003f30:	4622      	mov	r2, r4
 8003f32:	f7ff fbef 	bl	8003714 <memcpy>
 8003f36:	4631      	mov	r1, r6
 8003f38:	4638      	mov	r0, r7
 8003f3a:	f7ff ff33 	bl	8003da4 <_free_r>
 8003f3e:	e7e9      	b.n	8003f14 <_realloc_r+0x1c>
 8003f40:	4635      	mov	r5, r6
 8003f42:	e7e7      	b.n	8003f14 <_realloc_r+0x1c>

08003f44 <_sbrk_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	2300      	movs	r3, #0
 8003f48:	4c05      	ldr	r4, [pc, #20]	; (8003f60 <_sbrk_r+0x1c>)
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	f7fd fd50 	bl	80019f4 <_sbrk>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_sbrk_r+0x1a>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_sbrk_r+0x1a>
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	20000204 	.word	0x20000204

08003f64 <__malloc_lock>:
 8003f64:	4770      	bx	lr

08003f66 <__malloc_unlock>:
 8003f66:	4770      	bx	lr

08003f68 <_malloc_usable_size_r>:
 8003f68:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	f1a0 0004 	sub.w	r0, r0, #4
 8003f72:	bfbc      	itt	lt
 8003f74:	580b      	ldrlt	r3, [r1, r0]
 8003f76:	18c0      	addlt	r0, r0, r3
 8003f78:	4770      	bx	lr
	...

08003f7c <_init>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	bf00      	nop
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr

08003f88 <_fini>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr
